#!/bin/bash

set -xeuo pipefail

# do not run this during the pipeline upload
if [ "$BUILDKITE_LABEL" == ":pipeline:" ]; then
    exit 0
fi

echo "~~~ Testing ${CLOUD_PROVIDER}"

mkdir -p .local/bin
PATH="$(realpath .local/bin):${PATH}"
CLUSTER_BASE_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}"

# dump the kind state on exit
kind_dump() {
    echo ~~~ KIND dump on exit

    local DUMP="/tmp/kind-${BUILDKITE_BUILD_NUMBER}"
    local TAR="${DUMP}.tar.gz"
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    unset GCP_B64ENCODED_CREDENTIALS PROJECT_ID GOOGLE_APPLICATION_CREDENTIALS
    unset AZURE_CLIENT_SECRET
    kind export logs -n bootstrap "${DUMP}"
    tar czf "${TAR}" -C "${DUMP}" .
    buildkite-agent artifact upload "${TAR}"
}

# install task
curl -Ls https://github.com/go-task/task/releases/download/v3.24.0/task_linux_amd64.tar.gz | tar xzv -C .local/bin task

task --parallel tool:kind tool:helm tool:kubectl tool:ct tool:support-bundle

test_eks() {
    echo ~~~ Start EKS variant

    AWS_ACCESS_KEY_ID="$HELMCHART_TEST_ACCOUNT_AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY="$HELMCHART_TEST_ACCOUNT_AWS_SECRET_ACCESS_KEY"
    AWS_REGION=us-west-2
    TEST_BUCKET="cloud-sandbox-buildkite-${BUILDKITE_BUILD_NUMBER}"
    export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION TEST_BUCKET

    task tool:aws

    # create s3 bucket for tiered storage
    aws s3api create-bucket --bucket "${TEST_BUCKET}" \
        --region "${AWS_REGION}" --create-bucket-configuration "LocationConstraint=${AWS_REGION}"\
        --object-ownership BucketOwnerEnforced

    trap kind_dump EXIT

    # create eks cluster
    # this is very expensive (about an hour). Add new commands above this, not after.
    task capi-create-eks CLUSTER_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}"

    KUBECONFIG=.local/kubeconfig clusterctl get kubeconfig "buildkite-${BUILDKITE_BUILD_NUMBER}-eks-cluster" > ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-eks-cluster.conf"
    KUBECONFIG=$(realpath ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-eks-cluster.conf")
    export KUBECONFIG

    envsubst < ./charts/redpanda/ci/21-eks-tiered-storage-with-creds-values.yaml.tpl > ./charts/redpanda/ci/21-eks-tiered-storage-with-creds-values.yaml
    envsubst < ./charts/redpanda/ci/24-eks-tiered-storage-persistent-with-creds-values.yaml.tpl > ./charts/redpanda/ci/24-eks-tiered-storage-persistent-with-creds-values.yaml
    envsubst < ./charts/redpanda/ci/27-eks-tiered-storage-persistent-nameoverwrite-with-creds-values.yaml.tpl > ./charts/redpanda/ci/27-eks-tiered-storage-persistent-nameoverwrite-with-creds-values.yaml
}

test_gke() {
    echo ~~~ Start GKE variant

    CI=true
    PROJECT_ID="$HELMCHART_TEST_PROJECT_ID"

    TEST_BUCKET="cloud-sandbox-buildkite-${BUILDKITE_BUILD_NUMBER}"
    TEST_SA_NAME="redpanda-bucket-sa-${BUILDKITE_BUILD_NUMBER}"

    export CI PROJECT_ID TEST_BUCKET TEST_SA_NAME

    task tool:gcloud tool:auth-gcp

    gcloud iam service-accounts create "${TEST_SA_NAME}" \
         --description="Service account which will be assigned to Redpanda cluster for Tiered Storage" \
         --display-name="${TEST_SA_NAME}" \
         --project "${PROJECT_ID}"

    gcloud storage buckets create "gs://${TEST_BUCKET}" --project "${PROJECT_ID}" --location="US-WEST1"

    gcloud storage buckets add-iam-policy-binding "gs://${TEST_BUCKET}" \
        --member="serviceAccount:${TEST_SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com" --role=roles/storage.objectAdmin \
        --project "${PROJECT_ID}"

    gsutil hmac create -p "${PROJECT_ID}" "${TEST_SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com" > hmac.result

    GCP_ACCESS_KEY_ID=$(cat hmac.result | head -n 1 | awk '{ print $3 }')
    GCP_SECRET_ACCESS_KEY=$(cat hmac.result | tail -n 1 | awk '{ print $2 }')

    export GCP_ACCESS_KEY_ID GCP_SECRET_ACCESS_KEY

    rm hmac.result

    trap kind_dump EXIT

    task capi-create-gke CLUSTER_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}"

    task gke-get-kubeconfig KUBECONFIG=$(realpath ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-gke-cluster.conf") CLUSTER_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}"
    KUBECONFIG=$(realpath ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-gke-cluster.conf")
    export KUBECONFIG

    buildkite-agent artifact upload $KUBECONFIG

    envsubst < ./charts/redpanda/ci/22-gke-tiered-storage-with-creds-values.yaml.tpl > ./charts/redpanda/ci/22-gke-tiered-storage-with-creds-values.yaml
    envsubst < ./charts/redpanda/ci/25-gke-tiered-storage-persistent-with-creds-values.yaml.tpl > ./charts/redpanda/ci/25-gke-tiered-storage-persistent-with-creds-values.yaml
    envsubst < ./charts/redpanda/ci/28-gke-tiered-storage-persistent-nameoverwrite-with-creds-values.yaml.tpl > ./charts/redpanda/ci/28-gke-tiered-storage-persistent-nameoverwrite-with-creds-values.yaml
}

test_aks() {
    echo ~~~ Start AKS variant

    CI=true

    TEST_STORAGE_ACCOUNT="tieredstoragetest${BUILDKITE_BUILD_NUMBER}"
    TEST_STORAGE_CONTAINER="testcontainer${BUILDKITE_BUILD_NUMBER}"
    TEST_RESOURCE_GROUP="k8s-team-rg-${BUILDKITE_BUILD_NUMBER}"

    # Taken from https://github.com/kubernetes-sigs/cluster-api/blob/ab50d0bc33ccaeb01bde978cd0d25e93efed95ba/docs/book/src/user/quick-start.md?plain=1#L450-L470
    export AZURE_TENANT_ID="9a95fd9e-005d-487a-9a01-d08c1eab2757"
    export AZURE_CLIENT_ID="918839a6-3e96-4950-8bf2-f56d0a2e7447"
    export AZURE_SUBSCRIPTION_ID="6d88ea35-36ad-4a17-88f8-7ba935e900b0"

    # Base64 encode the variables
    export AZURE_SUBSCRIPTION_ID_B64="$(echo -n "$AZURE_SUBSCRIPTION_ID" | base64 | tr -d '\n')"
    export AZURE_TENANT_ID_B64="$(echo -n "$AZURE_TENANT_ID" | base64 | tr -d '\n')"
    export AZURE_CLIENT_ID_B64="$(echo -n "$AZURE_CLIENT_ID" | base64 | tr -d '\n')"
    export AZURE_CLIENT_SECRET_B64="$(echo -n "$AZURE_CLIENT_SECRET" | base64 | tr -d '\n')"

    # Settings needed for AzureClusterIdentity used by the AzureCluster
    export AZURE_CLUSTER_IDENTITY_SECRET_NAME="cluster-identity-secret"
    export AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE="default"

    export TEST_STORAGE_ACCOUNT TEST_RESOURCE_GROUP TEST_STORAGE_CONTAINER

    docker run -v $(realpath .azure):/root/.azure mcr.microsoft.com/azure-cli:2.50.0 \
      az login --service-principal \
      --username $AZURE_CLIENT_ID \
      --password $AZURE_CLIENT_SECRET \
      --tenant $AZURE_TENANT_ID

    # the westus2 is used as buildkite is deployed in us-west-2 which is close to Azure westus2 (Maybe in the same city)
    docker run -v $(realpath .azure):/root/.azure mcr.microsoft.com/azure-cli:2.50.0 \
      az group create \
      --name $TEST_RESOURCE_GROUP \
      --location westus2

    docker run -v $(realpath .azure):/root/.azure mcr.microsoft.com/azure-cli:2.50.0 \
      az storage account create \
      --name $TEST_STORAGE_ACCOUNT \
      --resource-group $TEST_RESOURCE_GROUP \
      --location westus2 \
      --sku Standard_RAGRS \
      --kind StorageV2

    docker run -v $(realpath .azure):/root/.azure mcr.microsoft.com/azure-cli:2.50.0 \
      az storage container create \
      --name $TEST_STORAGE_CONTAINER \
      --account-name $TEST_STORAGE_ACCOUNT


    TEST_AZURE_SHARED_KEY=$(docker run -v $(realpath .azure):/root/.azure mcr.microsoft.com/azure-cli:2.50.0 az storage account keys list -g $TEST_RESOURCE_GROUP -n $TEST_STORAGE_ACCOUNT --query '[0].value' -o tsv)
    export TEST_AZURE_SHARED_KEY

    trap kind_dump EXIT

    task capi-create-aks CLUSTER_NAME="buildkite-${BUILDKITE_BUILD_NUMBER}" CLUSTER_KUBECONFIG_PATH=".local/buildkite-${BUILDKITE_BUILD_NUMBER}-aks-cluster.conf"

    KUBECONFIG=$(realpath ".local/buildkite-${BUILDKITE_BUILD_NUMBER}-aks-cluster.conf")
    export KUBECONFIG

    buildkite-agent artifact upload $KUBECONFIG

    envsubst < ./charts/redpanda/ci/23-aks-tiered-storage-with-creds-values.yaml.tpl > ./charts/redpanda/ci/23-aks-tiered-storage-with-creds-values.yaml
    envsubst < ./charts/redpanda/ci/26-aks-tiered-storage-persistent-with-creds-values.yaml.tpl > ./charts/redpanda/ci/26-aks-tiered-storage-persistent-with-creds-values.yaml
    envsubst < ./charts/redpanda/ci/29-aks-tiered-storage-persistent-nameoverwrite-with-creds-values.yaml.tpl > ./charts/redpanda/ci/29-aks-tiered-storage-persistent-nameoverwrite-with-creds-values.yaml
}

test_"${CLOUD_PROVIDER}"

# install cert-manager
task install-cert-manager
