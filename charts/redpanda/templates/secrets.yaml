{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- $values := .Values -}}
{{- $internalAdvertiseAddress := printf "%s.%s" "${SERVICE_NAME}" (include "redpanda.internal.domain" .) -}}
{{- $externalAdvertiseAddress := printf "${SERVICE_NAME}" -}}
{{- if (tpl ($values.external.domain | default "") $) -}}
  {{- $externalAdvertiseAddress = printf "${SERVICE_NAME}.%s" (tpl $values.external.domain $) -}}
{{- end -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "redpanda.fullname" . }}-sts-lifecycle
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
type: Opaque
stringData:
  common.sh: |-
    #!/usr/bin/env bash

    # the SERVICE_NAME comes from the metadata.name of the pod, essentially the POD_NAME
    CURL_URL="{{ include "admin-http-protocol" . }}://${SERVICE_NAME}.{{ template "redpanda.servicename" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | trimSuffix "." }}:{{ .Values.listeners.admin.port }}"

    # commands used throughout
    CURL_NODE_ID_CMD="curl --silent --fail {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/node_config"

    CURL_MAINTENANCE_DELETE_CMD_PREFIX='curl -X DELETE --silent -o /dev/null -w "%{http_code}"'
    CURL_MAINTENANCE_PUT_CMD_PREFIX='curl -X PUT --silent -o /dev/null -w "%{http_code}"'
    CURL_MAINTENANCE_GET_CMD="curl -X GET --silent {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/maintenance"

  postStart.sh: |-
    #!/usr/bin/env bash
    # This code should be similar if not exactly the same as that found in the panda-operator, see
    # https://github.com/redpanda-data/redpanda/blob/e51d5b7f2ef76d5160ca01b8c7a8cf07593d29b6/src/go/k8s/pkg/resources/secret.go

    # path below should match the path defined on the statefulset
    source /var/lifecycle/common.sh

    postStartHook () {
      set -x

      touch /tmp/postStartHookStarted

      until NODE_ID=$(${CURL_NODE_ID_CMD} | grep -o '\"node_id\":[^,}]*' | grep -o '[^: ]*$'); do
          sleep 0.5
      done

      echo "Clearing maintenance mode on node ${NODE_ID}"
      CURL_MAINTENANCE_DELETE_CMD="${CURL_MAINTENANCE_DELETE_CMD_PREFIX} {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/brokers/${NODE_ID}/maintenance"
      # a 400 here would mean not in maintenance mode
      until [ "${status:-}" = '"200"' ] || [ "${status:-}" = '"400"' ]; do
          status=$(${CURL_MAINTENANCE_DELETE_CMD})
          sleep 0.5
      done

{{- if and .Values.auth.sasl.enabled (not (empty .Values.auth.sasl.secretRef )) }}
      # Setup and export SASL bootstrap-user
      IFS=":" read -r USER_NAME PASSWORD MECHANISM < <(grep "" $(find /etc/secrets/users/* -print))
      MECHANISM=${MECHANISM:-{{- include "sasl-mechanism" . }}}
      rpk acl user create ${USER_NAME} --password=${PASSWORD} --mechanism ${MECHANISM} || true
{{- end }}

      touch /tmp/postStartHookFinished
    }

    postStartHook
    true

  preStop.sh: |-
    #!/usr/bin/env bash
    # This code should be similar if not exactly the same as that found in the panda-operator, see
    # https://github.com/redpanda-data/redpanda/blob/e51d5b7f2ef76d5160ca01b8c7a8cf07593d29b6/src/go/k8s/pkg/resources/secret.go

    touch /tmp/preStopHookStarted

    # path below should match the path defined on the statefulset
    source /var/lifecycle/common.sh

    set -x

    preStopHook () {
      until NODE_ID=$(${CURL_NODE_ID_CMD} | grep -o '\"node_id\":[^,}]*' | grep -o '[^: ]*$'); do
          sleep 0.5
      done

      echo "Setting maintenance mode on node ${NODE_ID}"
      CURL_MAINTENANCE_PUT_CMD="${CURL_MAINTENANCE_PUT_CMD_PREFIX} {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/brokers/${NODE_ID}/maintenance"
      until [ "${status:-}" = '"200"' ]; do
          status=$(${CURL_MAINTENANCE_PUT_CMD})
          sleep 0.5
      done

      until [ "${finished:-}" = "true" ] || [ "${draining:-}" = "false" ]; do
          res=$(${CURL_MAINTENANCE_GET_CMD})
          finished=$(echo $res | grep -o '\"finished\":[^,}]*' | grep -o '[^: ]*$')
          draining=$(echo $res | grep -o '\"draining\":[^,}]*' | grep -o '[^: ]*$')
          sleep 0.5
      done

      touch /tmp/preStopHookFinished
    }

{{- if and ( gt ( .Values.statefulset.replicas | int64 ) 2) ( not ( dig "node" "recovery_mode_enabled" false .Values.config ) ) }}
    preStopHook
{{- else }}
    touch /tmp/preStopHookFinished
    echo "Not enough replicas or in recovery mode, cannot put a broker into maintenance mode."
{{- end }}
    true
{{- if and (not (empty .Values.auth.sasl.secretRef)) (and .Values.auth.sasl.enabled .Values.auth.sasl.users) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.auth.sasl.secretRef | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
type: Opaque
stringData:
  users.txt: |-
  {{- range $user := .Values.auth.sasl.users }}
    {{- if not (empty $user.mechanism) }}
    {{ printf "%s:%s:%s" $user.name $user.password $user.mechanism }}
    {{- else }}
    {{ printf "%s:%s" $user.name $user.password}}
    {{- end }}
  {{- end }}
{{- else if and .Values.auth.sasl.enabled  ( empty .Values.auth.sasl.secretRef)  }}
{{- fail "auth.sasl.secretRef cannot be empty when auth.sasl.enabled=true" }}
{{- end }}
{{- if .Values.statefulset.sideCars.configWatcher.enabled }}
  {{- $values := .Values }}
  {{- $sasl := .Values.auth.sasl }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "redpanda.fullname" . }}-config-watcher
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
  {{- . | nindent 4 }}
  {{- end }}
type: Opaque
stringData:
  sasl-user.sh: |-
    #!/usr/bin/env bash

    trap 'error_handler $? $LINENO' ERR

    error_handler() {
      echo "Error: ($1) occurred at line $2"
    }

    set -e

    echo "Waiting for cluster to be ready"
    rpk cluster health --watch --exit-when-healthy

  {{- if and $sasl.enabled (not (empty $sasl.secretRef )) }}
    while true; do
      echo "RUNNING: Monitoring and Updating SASL users"
      USERS_DIR="/etc/secrets/users"

      new_users_list(){
        LIST=$1
        NEW_USER=$2
        if [[ -n "${LIST}" ]]; then
          LIST="${NEW_USER},${LIST}"
        else
          LIST="${NEW_USER}"
        fi

        echo "${LIST}"
      }

      process_users() {
        USERS_DIR=${1-"/etc/secrets/users"}
        USERS_FILE=$(find ${USERS_DIR}/* -print)
        USERS_LIST=""
        READ_LIST_SUCCESS=0
        # Read line by line, handle a missing EOL at the end of file
        while read p || [ -n "$p" ] ; do
          IFS=":" read -r USER_NAME PASSWORD MECHANISM <<< $p
          # Do not process empty lines
          if [ -z "$USER_NAME" ]; then
            continue
          fi
          if [[ "${USER_NAME// /}" != "$USER_NAME" ]]; then
            continue
          fi
          echo "Creating user ${USER_NAME}..."
          MECHANISM=${MECHANISM:-{{- include "sasl-mechanism" . }}}
          creation_result=$(rpk acl user create ${USER_NAME} --password=${PASSWORD} --mechanism ${MECHANISM} 2>&1) && creation_result_exit_code=$? || creation_result_exit_code=$?  # On a non-success exit code
          if [[ $creation_result_exit_code -ne 0 ]]; then
            # Check if the stderr contains "User already exists"
            # this error occurs when password has changed
            if [[ $creation_result == *"User already exists"* ]]; then
              echo "Update user ${USER_NAME}"
              # we will try to update by first deleting
              deletion_result=$(rpk acl user delete ${USER_NAME} 2>&1) && deletion_result_exit_code=$? || deletion_result_exit_code=$?
              if [[ $deletion_result_exit_code -ne 0 ]]; then
                echo "deletion of user ${USER_NAME} failed: ${deletion_result}"
                READ_LIST_SUCCESS=1
                break
              fi
              # Now we update the user
              update_result=$(rpk acl user create ${USER_NAME} --password=${PASSWORD} --mechanism ${MECHANISM} 2>&1) && update_result_exit_code=$? || update_result_exit_code=$?  # On a non-success exit code
              if [[ $update_result_exit_code -ne 0 ]]; then
                echo "updating user ${USER_NAME} failed: ${update_result}"
                READ_LIST_SUCCESS=1
                break
              else
                echo "Updated user ${USER_NAME}..."
                USERS_LIST=$(new_users_list "${USERS_LIST}" "${USER_NAME}")
              fi
            else
              # Another error occurred, so output the original message and exit code
              echo "error creating user ${USER_NAME}: ${creation_result}"
              READ_LIST_SUCCESS=1
              break
            fi
          # On a success, the user was created so output that
          else
            echo "Created user ${USER_NAME}..."
            USERS_LIST=$(new_users_list "${USERS_LIST}" "${USER_NAME}")
          fi
        done < $USERS_FILE

        if [[ -n "${USERS_LIST}" && ${READ_LIST_SUCCESS} ]]; then
          echo "Setting superusers configurations with users [${USERS_LIST}]"
          superuser_result=$(rpk cluster config set superusers [${USERS_LIST}] 2>&1) && superuser_result_exit_code=$? || superuser_result_exit_code=$?
          if [[ $superuser_result_exit_code -ne 0 ]]; then
              echo "Setting superusers configurations failed: ${superuser_result}"
          else
              echo "Completed setting superusers configurations"
          fi
        fi
      }

      # first time processing
      process_users $USERS_DIR

      # subsequent changes detected here
      # watching delete_self as documented in https://ahmet.im/blog/kubernetes-inotify/
      USERS_FILE=$(find ${USERS_DIR}/* -print)
      while RES=$(inotifywait -q -e delete_self ${USERS_FILE}); do
        process_users $USERS_DIR
      done
    done
  {{- else }}
    echo "Nothing to do. Sleeping..."
    sleep infinity
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ (include "redpanda.fullname" .) | trunc 51 }}-configurator
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
  {{- . | nindent 4 }}
  {{- end }}
type: Opaque
stringData:
  configurator.sh: |-
    set -xe
    SERVICE_NAME=$1
    KUBERNETES_NODE_NAME=$2
    POD_ORDINAL=${SERVICE_NAME##*-}
    BROKER_INDEX=`expr $POD_ORDINAL + 1`

    CONFIG=/etc/redpanda/redpanda.yaml

    # Setup config files
    cp /tmp/base-config/redpanda.yaml "${CONFIG}"
    cp /tmp/base-config/bootstrap.yaml /etc/redpanda/.bootstrap.yaml

    {{- if not (include "redpanda-atleast-22-3-0" . | fromJson).bool }}
    # Configure bootstrap
    ## Not used for Redpanda v22.3.0+
    rpk --config "${CONFIG}" redpanda config set redpanda.node_id "${POD_ORDINAL}"
    if [ "${POD_ORDINAL}" = "0" ]; then
        rpk --config "${CONFIG}" redpanda config set redpanda.seed_servers '[]' --format yaml
    fi
    {{- end }}

{{- range $listenerName := (list "kafka" "http") }}
  {{- $listenerAdvertisedName := $listenerName }}
  {{- $redpandaConfigPart := "redpanda" }}
  {{- if eq $listenerAdvertisedName "http" }}
    {{- $listenerAdvertisedName = "pandaproxy" }}
    {{- $redpandaConfigPart = "pandaproxy" }}
  {{- end }}
  {{- $listenerVals := get $values.listeners $listenerName }}

    LISTENER={{ quote (toJson (dict "name" "internal" "address" $internalAdvertiseAddress "port" $listenerVals.port))}}
    rpk redpanda config --config "$CONFIG" set {{ $redpandaConfigPart }}.advertised_{{ $listenerAdvertisedName }}_api[0] "$LISTENER"

  {{- if $listenerVals.external }}
  {{- $externalCounter := 1 }}
    {{- range $externalName, $externalVals := $listenerVals.external }}

    ADVERTISED_{{ upper $listenerName }}_ADDRESSES=()
      {{- range $replicaIndex := until ($values.statefulset.replicas | int) }}

        {{- $tmplVals := dict "listenerVals" $listenerVals "externalVals" $externalVals "externalName" $externalName "externalAdvertiseAddress" $externalAdvertiseAddress "values" $values "replicaIndex" $replicaIndex }}
        {{- $port := int (include "advertised-port" $tmplVals) }}
        {{- $host := tpl (include "advertised-host" (mustMerge $tmplVals (dict "port" $port)) ) $ }}

    PREFIX_TEMPLATE={{ (include "advertised-address-template" (dict "externalVals" $values.external "externalListener" $externalVals)) }}
    ADVERTISED_{{ upper $listenerName }}_ADDRESSES+=({{ quote ($host) }})
      {{- end }}

    rpk redpanda config --config "$CONFIG" set {{ $redpandaConfigPart }}.advertised_{{ $listenerAdvertisedName }}_api[{{ $externalCounter }}] "${ADVERTISED_{{ upper $listenerName }}_ADDRESSES[$POD_ORDINAL]}"

      {{- $externalCounter = add $externalCounter 1 }}
    {{- end }}
  {{- end }}
{{- end }}

    {{- if (include "redpanda-atleast-22-3-0" . | fromJson).bool }}
      {{- if .Values.rackAwareness.enabled }}

    # Configure Rack Awareness
    set +x
    RACK=$(curl --silent --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt --fail -H 'Authorization: Bearer '$(cat /run/secrets/kubernetes.io/serviceaccount/token) "https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT_HTTPS}/api/v1/nodes/${KUBERNETES_NODE_NAME}?pretty=true" | grep {{ .Values.rackAwareness.nodeAnnotation | quote | squote }} | grep -v '\"key\":' | sed 's/.*": "\([^"]\+\).*/\1/')
    set -x
    rpk --config "$CONFIG" redpanda config set redpanda.rack "${RACK}"
      {{- end }}
    {{- end }}
{{- if .Values.statefulset.initContainers.fsValidator.enabled}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ (include "redpanda.fullname" .) | trunc 49 }}-fs-validator
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
  {{- . | nindent 4 }}
  {{- end }}
type: Opaque
stringData:
  fsValidator.sh: |-
    set -e
    EXPECTED_FS_TYPE=$1

    DATA_DIR="/var/lib/redpanda/data"
    TEST_FILE="testfile"

    echo "checking data directory exist..."
    if [ ! -d "${DATA_DIR}" ]; then
      echo "data directory does not exists, exiting"
      exit 1
    fi

    echo "checking filesystem type..."
    FS_TYPE=$(df -T $DATA_DIR  | tail -n +2 | awk '{print $2}')

    if [ "${FS_TYPE}" != "${EXPECTED_FS_TYPE}" ]; then
      echo "file system found to be ${FS_TYPE} when expected ${EXPECTED_FS_TYPE}"
      exit 1
    fi

    echo "checking if able to create a test file..."

    touch ${DATA_DIR}/${TEST_FILE}
    result=$(touch ${DATA_DIR}/${TEST_FILE} 2> /dev/null; echo $?)
    if [ "${result}" != "0" ]; then
      echo "could not write testfile, may not have write permission"
      exit 1
    fi

    echo "checking if able to delete a test file..."

    result=$(rm ${DATA_DIR}/${TEST_FILE} 2> /dev/null; echo $?)
    if [ "${result}" != "0" ]; then
      echo "could not delete testfile"
      exit 1
    fi

    echo "passed"

{{- end }}
