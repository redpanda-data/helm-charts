{{/*
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "redpanda.fullname" . }}-sts-lifecycle
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
type: Opaque
stringData:
  common.sh: |-
    #!/usr/bin/env bash

    # the SERVICE_NAME comes from the metadata.name of the pod, essentially the POD_NAME
    CURL_URL="{{ include "admin-http-protocol" . }}://${SERVICE_NAME}.{{ template "redpanda.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | trimSuffix "." }}:{{ .Values.listeners.admin.port }}"

    # commands used throughout
    CURL_NODE_ID_CMD="curl --silent --fail {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/node_config"

    CURL_MAINTENANCE_DELETE_CMD_PREFIX='curl -X DELETE --silent -o /dev/null -w "%{http_code}"'
    CURL_MAINTENANCE_PUT_CMD_PREFIX='curl -X PUT --silent -o /dev/null -w "%{http_code}"'
    CURL_MAINTENANCE_GET_CMD="curl -X GET --silent {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/maintenance"

  postStart.sh: |-
    #!/usr/bin/env bash
    # This code should be similar if not exactly the same as that found in the panda-operator, see
    # https://github.com/redpanda-data/redpanda/blob/e51d5b7f2ef76d5160ca01b8c7a8cf07593d29b6/src/go/k8s/pkg/resources/secret.go

    # path below should match the path defined on the statefulset
    source /var/lifecycle/common.sh

{{- if gt ( .Values.statefulset.replicas | int64 ) 2 }}
    postStartHook () {
      set -x

      until NODE_ID=$(${CURL_NODE_ID_CMD} | grep -o '\"node_id\":[^,}]*' | grep -o '[^: ]*$'); do
          sleep 0.5
      done

      echo "Clearing maintenance mode on node ${NODE_ID}"
      CURL_MAINTENANCE_DELETE_CMD="${CURL_MAINTENANCE_DELETE_CMD_PREFIX} {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/brokers/${NODE_ID}/maintenance"
      # a 400 here would mean not in maintenance mode
      until [ "${status:-}" = '"200"' ] || [ "${status:-}" = '"400"' ]; do
          status=$(${CURL_MAINTENANCE_DELETE_CMD})
          sleep 0.5
      done
    }

    timeout {{ div .Values.statefulset.terminationGracePeriodSeconds 2 }} postStartHook

    true
{{- end }}

{{- if and .Values.auth.sasl.enabled (not (empty .Values.auth.sasl.secretRef )) }}
    set +x

    # Setup and export SASL bootstrap-user
    IFS=":" read -r USER_NAME PASSWORD MECHANISM < $(find /etc/secrets/users/* -print)
    MECHANISM=${MECHANISM:-{{- include "sasl-mechanism" . }}}
    rpk acl user create ${USER_NAME} --password=${PASSWORD} --mechanism ${MECHANISM} {{ template "rpk-flags-no-brokers-no-sasl" $ }} || true
{{- end }}

  preStop.sh: |-
    #!/usr/bin/env bash
    # This code should be similar if not exactly the same as that found in the panda-operator, see
    # https://github.com/redpanda-data/redpanda/blob/e51d5b7f2ef76d5160ca01b8c7a8cf07593d29b6/src/go/k8s/pkg/resources/secret.go

    # path below should match the path defined on the statefulset
    source /var/lifecycle/common.sh

    set -x

{{- if gt ( .Values.statefulset.replicas | int64 ) 2 }}
    preStopHook () {
      until NODE_ID=$(${CURL_NODE_ID_CMD} | grep -o '\"node_id\":[^,}]*' | grep -o '[^: ]*$'); do
          sleep 0.5
      done

      echo "Setting maintenance mode on node ${NODE_ID}"
      CURL_MAINTENANCE_PUT_CMD="${CURL_MAINTENANCE_PUT_CMD_PREFIX} {{ include "admin-tls-curl-flags" . }} ${CURL_URL}/v1/brokers/${NODE_ID}/maintenance"
      until [ "${status:-}" = '"200"' ]; do
          status=$(${CURL_MAINTENANCE_PUT_CMD})
          sleep 0.5
      done

      until [ "${finished:-}" = "true" ] || [ "${draining:-}" = "false" ]; do
          res=$(${CURL_MAINTENANCE_GET_CMD})
          finished=$(echo $res | grep -o '\"finished\":[^,}]*' | grep -o '[^: ]*$')
          draining=$(echo $res | grep -o '\"draining\":[^,}]*' | grep -o '[^: ]*$')
          sleep 0.5
      done
    }

    timeout {{ div .Values.statefulset.terminationGracePeriodSeconds 2 }} preStopHook

    true
{{- end }}
{{- if and (not (empty .Values.auth.sasl.secretRef)) (and .Values.auth.sasl.enabled .Values.auth.sasl.users) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.auth.sasl.secretRef | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
type: Opaque
stringData:
  users.txt: |-
  {{- range $user := .Values.auth.sasl.users }}
    {{- if not (empty $user.mechanism) }}
    {{ printf "%s:%s:%s" $user.name $user.password $user.mechanism }}
    {{- else }}
    {{ printf "%s:%s" $user.name $user.password}}
    {{- end }}
  {{- end }}
    # intentional empty line
{{- end }}

{{- if .Values.statefulset.sideCars.configWatcher.enabled }}
  {{- $values := .Values }}
  {{- $sasl := .Values.auth.sasl }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "redpanda.fullname" . }}-config-watcher
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
  {{- . | nindent 4 }}
  {{- end }}
type: Opaque
stringData:
  sasl-user.sh: |-
    #!/usr/bin/env bash
    set -e
    
    ready_result_exit_code=1
    while [[ ${ready_result_exit_code} -ne 0 ]]; do
      ready_result=$(rpk cluster health {{ include "rpk-acl-user-flags" . }} | grep 'Healthy:.*true' 2>&1) && ready_result_exit_code=$?
      sleep 2
    done
    
    while true; do
    {{- if and $sasl.enabled (not (empty $sasl.secretRef )) }}
      echo "RUNNING: Monitoring and Updating SASL users"
      USERS_DIR="/etc/secrets/users"
    
      new_users_list(){
        LIST=$1
        NEW_USER=$2
        if [[ -n "${LIST}" ]]; then
          LIST="${NEW_USER},${LIST}"
        else
          LIST="${NEW_USER}"
        fi
    
        echo "${LIST}"
      }
      
      process_users() {
        USERS_DIR=${1-"/etc/secrets/users"}
        USERS_FILE=$(find ${USERS_DIR}/* -print)
        USERS_LIST=""
        READ_LIST_SUCCESS=0
        while read p; do
          IFS=":" read -r USER_NAME PASSWORD MECHANISM <<< $p
          # Do not process empty lines
          if [ -z "$USER_NAME" ]; then
            continue
          fi
          echo "Creating user ${USER_NAME}..."
          MECHANISM=${MECHANISM:-{{- include "sasl-mechanism" . }}}
          creation_result=$(rpk acl user create ${USER_NAME} --password=${PASSWORD} --mechanism ${MECHANISM} {{ include "rpk-acl-user-flags" $ }} 2>&1) && creation_result_exit_code=$? || creation_result_exit_code=$?  # On a non-success exit code
          if [[ $creation_result_exit_code -ne 0 ]]; then
            # Check if the stderr contains "User already exists"
            # this error occurs when password has changed
            if [[ $creation_result == *"User already exists"* ]]; then
              echo "Update user ${USER_NAME}"
              # we will try to update by first deleting
              deletion_result=$(rpk acl user delete ${USER_NAME}  {{ include "rpk-acl-user-flags" $ }} 2>&1) && deletion_result_exit_code=$? || deletion_result_exit_code=$?
              if [[ $deletion_result_exit_code -ne 0 ]]; then
                echo "deletion of user ${USER_NAME} failed: ${deletion_result}"
                READ_LIST_SUCCESS=1
                break
              fi
              # Now we update the user
              update_result=$(rpk acl user create ${USER_NAME} --password=${PASSWORD} --mechanism ${MECHANISM}  {{ include "rpk-acl-user-flags" $ }} 2>&1) && update_result_exit_code=$? || update_result_exit_code=$?  # On a non-success exit code
              if [[ $update_result_exit_code -ne 0 ]]; then
                echo "updating user ${USER_NAME} failed: ${update_result}"
                READ_LIST_SUCCESS=1
                break
              else
                echo "Updated user ${USER_NAME}..."
                USERS_LIST=$(new_users_list "${USERS_LIST}" "${USER_NAME}")
              fi
            else
              # Another error occurred, so output the original message and exit code
              echo "error creating user ${USER_NAME}: ${creation_result}"
              READ_LIST_SUCCESS=1
              break
            fi
          # On a success, the user was created so output that
          else
            echo "Created user ${USER_NAME}..."
            USERS_LIST=$(new_users_list "${USERS_LIST}" "${USER_NAME}")
          fi
        done < $USERS_FILE
            
        if [[ -n "${USERS_LIST}" && ${READ_LIST_SUCCESS} ]]; then
          echo "Setting superusers configurations with users [${USERS_LIST}]"
          superuser_result=$(rpk cluster config set superusers [${USERS_LIST}] {{ template "rpk-acl-user-flags" $ }} 2>&1) && superuser_result_exit_code=$? || superuser_result_exit_code=$?
          if [[ $superuser_result_exit_code -ne 0 ]]; then
              echo "Setting superusers configurations failed: ${superuser_result}"
          else
              echo "Completed setting superusers configurations" 
          fi
        fi
      }
  
      # first time processing
      process_users $USERS_DIR
    
      # subsequent changes detected here
      # watching delete_self as documented in https://ahmet.im/blog/kubernetes-inotify/
      USERS_FILE=$(find ${USERS_DIR}/* -print)
      while RES=$(inotifywait -q -e delete_self ${USERS_FILE}); do
        process_users $USERS_DIR
      done
    {{- end }}
      sleep infinity
    done
{{- end }}
