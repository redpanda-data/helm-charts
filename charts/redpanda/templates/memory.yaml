{{- /* Generated from "memory.go" */ -}}

{{- define "redpanda.RedpandaReserveMemory" -}}
{{- $dot := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- $values := $dot.Values.AsMap -}}
{{- $rpMem_1 := $values.resources.memory.redpanda -}}
{{- if (and (ne $rpMem_1 (coalesce nil)) (ne $rpMem_1.reserveMemory (coalesce nil))) -}}
{{- if (kindIs "string" $rpMem_1.reserveMemory) -}}
{{- (dict "r" (get (fromJson (include "redpanda.RedpandaMemoryToMi" (dict "a" (list $rpMem_1.reserveMemory) ))) "r")) | toJson -}}
{{- break -}}
{{- end -}}
{{- $_ := (fail (printf "Redpanda.ReserveMemory (%v) is not type of string" $rpMem_1.reserveMemory)) -}}
{{- end -}}
{{- (dict "r" (int (add (int (float64 (mulf (float64 (get (fromJson (include "redpanda.ContainerMemory" (dict "a" (list $dot) ))) "r")) 0.002))) 200))) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "redpanda.RedpandaMemory" -}}
{{- $dot := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- $values := $dot.Values.AsMap -}}
{{- $memory := 0 -}}
{{- $containerMemory := (get (fromJson (include "redpanda.ContainerMemory" (dict "a" (list $dot) ))) "r") -}}
{{- $rpMem_2 := $values.resources.memory.redpanda -}}
{{- if (and (ne $rpMem_2 (coalesce nil)) (ne $rpMem_2.memory (coalesce nil))) -}}
{{- if (kindIs "string" $rpMem_2.memory) -}}
{{- $memory = (int (get (fromJson (include "redpanda.RedpandaMemoryToMi" (dict "a" (list $rpMem_2.memory) ))) "r")) -}}
{{- else -}}
{{- $_ := (fail (printf "Redpanda.Memory (%v) is not type of string" $rpMem_2.reserveMemory)) -}}
{{- end -}}
{{- else -}}
{{- $memory = (int (float64 (mulf (float64 $containerMemory) 0.8))) -}}
{{- end -}}
{{- if (eq $memory 0) -}}
{{- $_ := (fail "unable to get memory value redpanda-memory") -}}
{{- end -}}
{{- if (lt $memory 256) -}}
{{- $_ := (fail (printf "%d is below the minimum value for Redpanda" $memory)) -}}
{{- end -}}
{{- if (gt (int (add $memory (int (get (fromJson (include "redpanda.RedpandaReserveMemory" (dict "a" (list $dot) ))) "r")))) (int $containerMemory)) -}}
{{- $_ := (fail (printf "Not enough container memory for Redpanda memory values where Redpanda: %d, reserve: %d, container: %d" $memory (get (fromJson (include "redpanda.RedpandaReserveMemory" (dict "a" (list $dot) ))) "r") $containerMemory)) -}}
{{- end -}}
{{- (dict "r" $memory) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "redpanda.SIToBytes" -}}
{{- $amount := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- $matched := (regexMatch `^[0-9]+(\.[0-9]){0,1}(k|M|G|T|P|Ki|Mi|Gi|Ti|Pi)?$` $amount) -}}
{{- if (not $matched) -}}
{{- $_ := (fail (printf "amount (%s) does not match regex" $amount)) -}}
{{- end -}}
{{- $unit := (substr (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)) -1 $amount) -}}
{{- $amount = (substr 0 (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)) $amount) -}}
{{- if (eq $unit "i") -}}
{{- $unit = (printf "%s%s" (substr (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)) -1 $amount) $unit) -}}
{{- $amount = (substr 0 (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)) $amount) -}}
{{- else -}}{{- if (regexMatch `\d` $unit) -}}
{{- $amount = (printf "%s%s" $amount $unit) -}}
{{- $unit = "" -}}
{{- end -}}
{{- end -}}
{{- $k := 1000 -}}
{{- $m := (int (mul $k $k)) -}}
{{- $g := (int (mul (int (mul $k $k)) $k)) -}}
{{- $t := (int (mul (int (mul (int (mul $k $k)) $k)) $k)) -}}
{{- $p := (int (mul (int (mul (int (mul (int (mul $k $k)) $k)) $k)) $k)) -}}
{{- $ki := 1024 -}}
{{- $mi := (int (mul $ki $ki)) -}}
{{- $gi := (int (mul (int (mul $ki $ki)) $ki)) -}}
{{- $ti := (int (mul (int (mul (int (mul $ki $ki)) $ki)) $ki)) -}}
{{- $pi := (int (mul (int (mul (int (mul (int (mul $ki $ki)) $ki)) $ki)) $ki)) -}}
{{- $tmp_tuple_1 := (get (fromJson (include "_shims.compact" (dict "a" (list (list (float64 $amount) nil)) ))) "r") -}}
{{- $err := $tmp_tuple_1.T2 -}}
{{- $amountFloat := $tmp_tuple_1.T1 -}}
{{- if (ne $err (coalesce nil)) -}}
{{- $_ := (fail (printf "SI to bytes conversion : %v" $err)) -}}
{{- end -}}
{{- if (eq $unit "") -}}
{{- (dict "r" (int $amountFloat)) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "k") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $k))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "M") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $m))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "G") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $g))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "T") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $t))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "P") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $p))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "Ki") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $ki))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "Mi") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $mi))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "Gi") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $gi))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "Ti") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $ti))))) | toJson -}}
{{- break -}}
{{- else -}}{{- if (eq $unit "Pi") -}}
{{- (dict "r" (int (float64 (mulf $amountFloat (float64 $pi))))) | toJson -}}
{{- break -}}
{{- else -}}
{{- $_ := (fail (printf "unknown unit: %q" $unit)) -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{- define "redpanda.RedpandaMemoryToMi" -}}
{{- $amount := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- (dict "r" (int (div (get (fromJson (include "redpanda.SIToBytes" (dict "a" (list (toString $amount)) ))) "r") ((mul 1024 1024))))) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "redpanda.ContainerMemory" -}}
{{- $dot := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- $values := $dot.Values.AsMap -}}
{{- if (ne $values.resources.memory.container.min (coalesce nil)) -}}
{{- (dict "r" (get (fromJson (include "redpanda.RedpandaMemoryToMi" (dict "a" (list $values.resources.memory.container.min) ))) "r")) | toJson -}}
{{- break -}}
{{- end -}}
{{- (dict "r" (get (fromJson (include "redpanda.RedpandaMemoryToMi" (dict "a" (list $values.resources.memory.container.max) ))) "r")) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

