{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{ $values := .Values }}

{{/* Secret */}}
{{ $secretConfig := dict ( dict
  "create" $.Values.console.secret.create
  )
}}
{{/* if the console chart has the creation of the secret disabled, create it here instead if needed */}}
{{ if and .Values.console.enabled (not .Values.console.secret.create) }}
{{ $licenseKey := ( include "enterprise-license" .  ) }}
# before license changes, this was not printing a secret, so we gather in which case to print
# for now only if we have a license do we print, however, this may be an issue for some
# since if we do include a license we MUST also print all secret items.
  {{ if ( not (empty $licenseKey ) ) }}
{{ $secretConfig = ( dict
  "create" true
  "enterprise" ( dict "license" $licenseKey)
  )
}}

{{ $config := dict
  "Values" (dict
  "secret" $secretConfig
  )}}

{{ $console := deepCopy .Subcharts.console }}
{{ $console = merge $config $console }}
---
{{ include (print .Subcharts.console.Template.BasePath "/secret.yaml") $console }}
  {{ end }}
{{ end }}

{{ $configmap := dict }}
{{/* if the console chart has the creation of the configmap disabled, create it here instead */}}
{{ if and .Values.console.enabled (not .Values.console.configmap.create) }}
{{ $consoleConfigmap := dict "create" true }}

{{/* kafka section */}}

{{/* brokers */}}
{{ $kafkaBrokers := list }}
{{ range (include "seed-server-list" . | mustFromJson) }}
  {{ $kafkaBrokers = append $kafkaBrokers (printf "%s:%d" . (int $values.listeners.kafka.port)) }}
{{ end }}

{{/* sasl */}}
{{/* the rest of sasl is configured through the secret */}}
{{ $kafkaSASL := dict "enabled" (include "sasl-enabled" . | fromJson).bool }}

{{/* tls */}}
{{/* the rest of tls is configured through the secret */}}
{{ $kafkaTLS := dict "enabled" (include "kafka-internal-tls-enabled" . | fromJson).bool }}

{{/* schemaRegistry */}}
{{- $urls := list -}}
{{ $proto := "http" }}
{{ if (include "schemaRegistry-internal-tls-enabled" . | fromJson).bool }}
  {{ $proto = "https" }}
{{ end }}
{{ $port := int $values.listeners.schemaRegistry.port }}
{{ range (include "seed-server-list" . | mustFromJson) }}
  {{ $urls = append $urls (printf "%s://%s:%d" $proto . $port) }}
{{ end }}
{{/* tls */}}
{{/* the rest of tls is configured through the secret */}}
{{ $schemaRegistryTLS := dict "enabled" (include "schemaRegistry-internal-tls-enabled" . | fromJson).bool }}

{{ $connectConfig := dict }}
{{ if .Values.connectors.enabled }}
{{ $connectorsValues := deepCopy .Subcharts.connectors }}
{{ $connectorsValues = merge $connectorsValues .Values.connectors }}
{{/* Connector */}}
{{/* Currently Kafka connect helm chart does not support TLS configuraiton. That's why tls enabled is set explicitly to false*/}}
{{/* Currently Kafka connect helm chart does not support basic auth. That's why username and password is set explicitly to empty string*/}}
{{ $connectConfig = dict
  "enabled" $values.connectors.enabled
  "clusters" (list
    (dict
      "url" (printf "http://%s.%s.svc.%s:%s" (include "connectors.serviceName" $connectorsValues) .Release.Namespace ($values.clusterDomain | trimSuffix ".") ($values.connectors.connectors.restPort | toString ))
      "name" "connectors"
      "tls" (dict
        "enabled" "false"
        "caFilepath" ""
        "certFilepath" ""
        "keyFilepath" ""
        "insecureSkipTlsVerify" "false"
      )
      "username" ""
      "password" ""
      "token" ""
    )
  )
}}
{{ end }}

{{ $kafkaSchemaRegistry := dict
      "enabled" (and .Values.listeners.schemaRegistry.enabled (include "redpanda-22-2-x-without-sasl" . | fromJson).bool)
      "urls" $urls
      "tls" $schemaRegistryTLS
}}
{{ $consoleConfigKafka := dict
      "brokers" $kafkaBrokers
      "sasl" $kafkaSASL
      "tls" $kafkaTLS
      "schemaRegistry" $kafkaSchemaRegistry
}}
{{ $consoleConfig := dict
      "kafka" $consoleConfigKafka
      "connect" $connectConfig
}}

{{ $consoleConfig := deepCopy .Values.console.config | merge $consoleConfig  }}

{{ $config := dict
    "Values" (dict
      "console" (dict "config" $consoleConfig)
      "configmap" $consoleConfigmap
      "secret" $secretConfig
    )
}}

{{ $console := deepCopy .Subcharts.console }}
{{ $console = merge $config $console }}
---
{{ include (print .Subcharts.console.Template.BasePath "/configmap.yaml") $console }}
{{ $configmap = include (print .Subcharts.console.Template.BasePath "/configmap.yaml") $console }}
{{ end }}

{{/* Deployment */}}
{{ if and .Values.console.enabled (not .Values.console.deployment.create) }}

{{ $extraVolumes := list }}
{{ $extraVolumeMounts := list }}
{{ $command := list }}
{{ if (include "sasl-enabled" . | fromJson).bool }}
  {{ $command = concat $command (list "sh" "-c") }}
  {{ $consoleSASLConfig := (printf "set -e; IFS=':' read -r KAFKA_SASL_USERNAME KAFKA_SASL_PASSWORD KAFKA_SASL_MECHANISM < <(grep \"\" $(find /mnt/users/* -print)); KAFKA_SASL_MECHANISM=${KAFKA_SASL_MECHANISM:-%s}; export KAFKA_SASL_USERNAME KAFKA_SASL_PASSWORD KAFKA_SASL_MECHANISM;" ( include "sasl-mechanism" . )) }}
  {{ $consoleSASLConfig = cat $consoleSASLConfig " export KAFKA_SCHEMAREGISTRY_USERNAME=$KAFKA_SASL_USERNAME;" }}
  {{ $consoleSASLConfig = cat $consoleSASLConfig " export KAFKA_SCHEMAREGISTRY_PASSWORD=$KAFKA_SASL_PASSWORD;" }}
  {{ $consoleSASLConfig = cat $consoleSASLConfig " /app/console $@" }}
  {{ $command = append $command $consoleSASLConfig }}
  {{ $command = append $command "--" }}
  {{ $extraVolumes = append $extraVolumes (dict
    "name" (printf "%s-users" (include "redpanda.fullname" .))
    "secret" (dict
      "secretName" .Values.auth.sasl.secretRef
    )
  )}}
  {{ $extraVolumeMounts = append $extraVolumeMounts (dict
    "name" (printf "%s-users" (include "redpanda.fullname" .))
    "mountPath" "/mnt/users"
    "readOnly" true
  ) }}
{{ end }}

{{ $kafkaTLS := list }}
{{ if (include "kafka-internal-tls-enabled" . | fromJson).bool }}
  {{ $service := .Values.listeners.kafka }}
  {{ $cert := get .Values.tls.certs $service.tls.cert }}
  {{- $secretName := (printf "%s-%s-cert" (include "redpanda.fullname" .) $service.tls.cert) }}
  {{- if $cert.secretRef }}
    {{- $secretName = $cert.secretRef.name }}
  {{- end }}
  {{ if $cert.caEnabled }}
    {{ $kafkaTLS = append $kafkaTLS (dict
      "name" "KAFKA_TLS_CAFILEPATH"
      "value" (printf "/mnt/cert/kafka/%s/ca.crt" $service.tls.cert)
    )}}
    {{ $extraVolumes = append $extraVolumes (dict
        "name" (printf "kafka-%s-cert" $service.tls.cert)
        "secret" (dict
          "defaultMode" 0420
          "items" (list (dict "key" "ca.crt" "path" "ca.crt") )
          "secretName" ( $secretName )
    ))}}
    {{ $extraVolumeMounts = append $extraVolumeMounts (dict
        "name" (printf "kafka-%s-cert" $service.tls.cert)
        "mountPath" (printf "/mnt/cert/kafka/%s" $service.tls.cert)
        "readOnly" true
    )}}
  {{ end }}
{{ end }}

{{ $schemaRegistryTLS := list }}
{{ if (include "schemaRegistry-internal-tls-enabled" . | fromJson).bool }}
  {{ $service := .Values.listeners.schemaRegistry }}
  {{ $cert := get .Values.tls.certs $service.tls.cert }}
  {{- $secretName := (printf "%s-%s-cert" (include "redpanda.fullname" .) $service.tls.cert) }}
  {{- if $cert.secretRef }}
  {{- $secretName = $cert.secretRef.name }}
  {{- end }}
  {{ if $cert.caEnabled }}
    {{ $schemaRegistryTLS = append $schemaRegistryTLS (dict
      "name" "KAFKA_SCHEMAREGISTRY_TLS_CAFILEPATH"
      "value" (printf "/mnt/cert/schemaregistry/%s/ca.crt" $service.tls.cert)
    )}}
    {{ $extraVolumes = append $extraVolumes (dict
        "name" (printf "schemaregistry-%s-cert" $service.tls.cert)
        "secret" (dict
          "defaultMode" 0420
          "items" (list (dict "key" "ca.crt" "path" "ca.crt") )
          "secretName" ( $secretName )
    ))}}
    {{ $extraVolumeMounts = append $extraVolumeMounts (dict
        "name" (printf "schemaregistry-%s-cert" $service.tls.cert)
        "mountPath" (printf "/mnt/cert/schemaregistry/%s" $service.tls.cert)
        "readOnly" true
    )}}
  {{ end }}
{{ end }}

{{ $adminAPI := list }}
{{ if (include "admin-internal-tls-enabled" . | fromJson).bool }}
  {{ $service := .Values.listeners.admin }}
  {{ $cert := get .Values.tls.certs $service.tls.cert }}
  {{- $secretName := (printf "%s-%s-cert" (include "redpanda.fullname" .) $service.tls.cert) }}
  {{- if $cert.secretRef }}
  {{- $secretName = $cert.secretRef.name }}
  {{- end }}
  {{ if $cert.caEnabled }}
    {{ $adminAPI = append $adminAPI (dict
      "name" "REDPANDA_ADMINAPI_TLS_ENABLED"
      "value" "true"
    ) }}
    {{ $adminAPI = append $adminAPI (dict
      "name" "REDPANDA_ADMINAPI_TLS_CAFILEPATH"
      "value" (printf "/mnt/cert/adminapi/%s/ca.crt" $service.tls.cert)
    )}}
    {{ $extraVolumes = append $extraVolumes (dict
        "name" (printf "adminapi-%s-cert" $service.tls.cert)
        "secret" (dict
          "defaultMode" 0420
          "items" (list (dict "key" "ca.crt" "path" "ca.crt") )
          "secretName" ( $secretName )
    ))}}
    {{ $extraVolumeMounts = append $extraVolumeMounts (dict
        "name" (printf "adminapi-%s-cert" $service.tls.cert)
        "mountPath" (printf "/mnt/cert/adminapi/%s" $service.tls.cert)
        "readOnly" true
    )}}
  {{ end }}
{{ end }}
{{ $adminAPI := append $adminAPI (dict
  "name" "REDPANDA_ADMINAPI_ENABLED"
  "value" "true"
)}}
{{ $adminAPI = append $adminAPI (dict
  "name" "REDPANDA_ADMINAPI_URLS"
  "value" (print (include "admin-http-protocol" .) "://" (include "admin-api-service-url" .))
)}}

{{ $enterprise := dict }}
{{ if ( include "enterprise-secret" .) }}
  {{ $enterprise = dict
    "licenseSecretRef" ( dict
       "name" ( include "enterprise-secret-name" . )
       "key" ( include "enterprise-secret-key" . )
     )
  }}
{{ end }}

{{ $extraEnv := concat $kafkaTLS $schemaRegistryTLS $adminAPI .Values.console.extraEnv }}
{{ $extraVolumes = concat $extraVolumes .Values.console.extraVolumes }}
{{ $extraVolumeMounts = concat $extraVolumeMounts .Values.console.extraVolumeMounts }}
{{ $consoleValues := dict
  "Values" (dict
  "extraVolumes" $extraVolumes
  "extraVolumeMounts" $extraVolumeMounts
  "extraEnv" $extraEnv
  "secret" $secretConfig
  "enterprise" $enterprise
  "image" $values.console.image
  "autoscaling" .Values.console.autoscaling
  "replicaCount" .Values.console.replicaCount
  "strategy" .Values.console.strategy
  "podAnnotations" .Values.console.podAnnotations
  "podLabels" .Values.console.podLabels
  "imagePullSecrets" .Values.console.imagePullSecrets
  "podSecurityContext" .Values.console.podSecurityContext
  "secretMounts" .Values.console.secretMounts
  "initContainers" .Values.console.initContainers
  "extraArgs" .Values.console.extraArgs
  "securityContext" .Values.console.securityContext
  "livenessProbe" .Values.console.livenessProbe
  "readinessProbe" .Values.console.readinessProbe
  "resources" .Values.console.resources
  "extraContainers" .Values.console.extraContainers
  "nodeSelector" .Values.console.nodeSelector
  "affinity" .Values.console.affinity
  "topologySpreadConstraints" .Values.console.topologySpreadConstraints
  "priorityClassName" .Values.console.priorityClassName
  "tolerations" .Values.console.tolerations
)}}

{{ if not (empty $command) }}
  {{ $consoleValues := merge $consoleValues (dict "Values" (dict "deployment" (dict "command" $command))) }}
{{ end }}
{{ $consoleValues := merge $consoleValues (dict "Values" (dict "deployment" (dict "create" (not .Values.console.deployment.create)))) }}

{{ if and .Values.console.enabled (not .Values.console.configmap.create) }}
{{ $consoleValues := merge $consoleValues (dict "Values" (dict "podAnnotations" (dict "checksum-redpanda-chart/config" ( $configmap | toYaml | sha256sum )))) }}
{{ end }}

{{ $helmVars := deepCopy .Subcharts.console }}
{{ $helmVars := merge $consoleValues $helmVars }}

---
{{ include (print .Subcharts.console.Template.BasePath "/deployment.yaml") $helmVars }}
{{ end }}
