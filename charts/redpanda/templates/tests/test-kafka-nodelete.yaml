{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if and .Values.tests.enabled (dig "kafka_nodelete_topics" "[]" $.Values.config.cluster) }}
{{- $noDeleteTopics := .Values.config.cluster.kafka_nodelete_topics }}
{{- $sasl := .Values.auth.sasl }}
{{- $root := deepCopy . }}
{{- $rpk := deepCopy . }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "redpanda.fullname" . }}-test-kafka-nodelete
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: {{ include "pod-security-context" . | nindent 4 }}
  {{- with .Values.imagePullSecrets }}
  imagePullSecrets: {{- toYaml . | nindent 4 }}
{{- end }}
  containers:
    - name: {{ template "redpanda.name" . }}
      image: {{ .Values.image.repository }}:{{ template "redpanda.tag" . }}
      env:
        - name: REDPANDA_BROKERS
          value: "{{ include "redpanda.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain | trimSuffix "." }}:{{ .Values.listeners.kafka.port }}"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      command:
        - /usr/bin/timeout
        - "120"
        - bash
        - -c
        - |
          set -e
{{- $cloudStorageFlags := "" }}
{{- if and (include "is-licensed" . | fromJson).bool (include "storage-tiered-config" .|fromJson).cloud_storage_enabled }}
  {{- $cloudStorageFlags = "-c retention.bytes=80 -c segment.bytes=40 -c redpanda.remote.read=true -c redpanda.remote.write=true"}}
{{- end }}
{{- if .Values.auth.sasl.enabled }}
          old_setting=${-//[^x]/}
          set +x
          IFS=":" read -r {{ include "rpk-sasl-environment-variables" . }} < <(grep "" $(find /etc/secrets/users/* -print))
          {{- if (include "redpanda-atleast-23-2-1" . | fromJson).bool }}
          RPK_SASL_MECHANISM=${RPK_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          {{- else }}
          REDPANDA_SASL_MECHANISM=${REDPANDA_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          {{- end }}
          export {{ include "rpk-sasl-environment-variables" . }}
          if [[ -n "$old_setting" ]]; then set -x; fi
{{- end }}
          {{- $i := .Values.statefulset.replicas }}
          {{- $default_topic_replicas := sub (add $i (mod $i 2)) 1 }}
          # wait for post-upgrade job to update the default_topic_replications value
          timeout 120 bash -c "until [[ $(rpk cluster config get default_topic_replications) = {{ $default_topic_replicas }} ]]; do sleep 1; done"
  
          exists=$(rpk topic list | grep my_sample_topic | awk '{print $1}')
          if [[ "$exists" != "my_sample_topic" ]]; then
            until rpk topic create my_sample_topic {{ $cloudStorageFlags }}
              do sleep 2
            done
          fi

          {{- range $i := until 100 }}
          echo "Pandas are awesome!" | rpk topic produce my_sample_topic
          {{- end }}
          sleep 2
          rpk topic consume my_sample_topic -n 1 | grep "Pandas are awesome!"
         
          # now check if we can delete the topic (we should not)
          rpk topic delete my_sample_topic

          {{- if has "my_sample_topic" $noDeleteTopics }}
          result=$(rpk topic list | grep my_sample_topic | awk '{print $1}')
          if [[ "$result" != "my_sample_topic" ]]; then
            echo "topic should not have been deleted"
            exit 1
          fi
          {{- end }}

      volumeMounts: {{ include "default-mounts" . | nindent 8 }}
      resources: {{ toYaml .Values.statefulset.resources | nindent 12 }}
      securityContext: {{ include "container-security-context" . | nindent 8 }}
  volumes: {{ include "default-volumes" . | nindent 4 }}
{{- end }}