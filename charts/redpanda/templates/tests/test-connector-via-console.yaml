{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if and .Values.connectors.enabled .Values.console.enabled }}
{{- $sasl := .Values.auth.sasl }}
{{- $root := deepCopy . }}
{{- $values := .Values }}
{{ $consoleValues := dict "Values" (deepCopy .Values.console) "Release" .Release "Chart" .Subcharts.console.Chart }}
{{/* brokers */}}
{{- $kafkaBrokers := list }}
{{- range (include "seed-server-list" . | mustFromJson) }}
  {{- $kafkaBrokers = append $kafkaBrokers (printf "%s:%s" . ($values.listeners.kafka.port | toString)) }}
{{- end }}
{{- $brokersString := join "," $kafkaBrokers}}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "redpanda.fullname" . | trunc 54 }}-test-connectors-via-console
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
    {{- . | nindent 4 }}
  {{- end }}
    test-name: test-connectors-via-console
  annotations:
    test-name: test-connectors-via-console
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext:
    runAsUser: 65535
    runAsGroup: 65535
  {{- with .Values.imagePullSecrets }}
  imagePullSecrets: {{- toYaml . | nindent 4 }}
  {{- end }}
  containers:
    - name: {{ template "redpanda.name" . }}
      image: {{ .Values.image.repository }}:{{ template "redpanda.tag" . }}
      env:
        - name: TLS_ENABLED
          value: {{ (include "kafka-internal-tls-enabled" . | fromJson).bool | quote }}
      command:
        - /usr/bin/timeout
        - "120"
        - bash
        - -c
        - |
          {{- $testTopic := printf "test-topic-%s" (randNumeric 3) }}
          rpk topic create {{ $testTopic }} {{ include "rpk-topic-flags" . }}
          rpk topic list {{ include "rpk-topic-flags" . }}
          echo "Test message!" | rpk topic produce {{ $testTopic }} {{ include "rpk-topic-flags" . }}

          SASL_MECHANISM="PLAIN"
          {{- if .Values.auth.sasl.enabled }}
          set -e
          set +x

          IFS=: read -r CONNECT_SASL_USERNAME KAFKA_SASL_PASSWORD CONNECT_SASL_MECHANISM < $(find /etc/secrets/users/* -print)
          CONNECT_SASL_MECHANISM=${CONNECT_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          if [[ -n "$CONNECT_SASL_USERNAME" && -n "$KAFKA_SASL_PASSWORD" && -n "$CONNECT_SASL_MECHANISM" ]]; then
            SASL_MECHANISM=$CONNECT_SASL_MECHANISM
            JAAS_CONFIG_SOURCE="\"source.cluster.sasl.jaas.config\": \"org.apache.kafka.common.security.scram.ScramLoginModule required username=\\\\"\"${CONNECT_SASL_USERNAME}\\\\"\" password=\\\\"\"${KAFKA_SASL_PASSWORD}\\\\"\";\","
            JAAS_CONFIG_TARGET="\"target.cluster.sasl.jaas.config\": \"org.apache.kafka.common.security.scram.ScramLoginModule required username=\\\\"\"${CONNECT_SASL_USERNAME}\\\\"\" password=\\\\"\"${KAFKA_SASL_PASSWORD}\\\\"\";\","
          fi

          set -x
          set +e
          {{- end }}

          SECURITY_PROTOCOL=PLAINTEXT
          if [[ -n "$CONNECT_SASL_MECHANISM" && $TLS_ENABLED == "true" ]]; then
            SECURITY_PROTOCOL="SASL_SSL"
          elif [[ -n "$CONNECT_SASL_MECHANISM" ]]; then
            SECURITY_PROTOCOL="SASL_PLAINTEXT"
          elif [[ $TLS_ENABLED == "true" ]]; then
            SECURITY_PROTOCOL="SSL"
          fi

          CONNECTOR_NAME=mm2-$RANDOM
          cat << 'EOF' > /tmp/mm2-conf.json
          {
            "connectorName": "CONNECTOR_NAME",
            "config": {
              "connector.class": "org.apache.kafka.connect.mirror.MirrorSourceConnector",
              "topics": "{{ $testTopic }}",
              "replication.factor": "1",
              "tasks.max": "1",
              "source.cluster.bootstrap.servers": {{ $brokersString | quote }},
              "target.cluster.bootstrap.servers": {{ $brokersString | quote }},
              "target.cluster.alias": "test-only-redpanda",
              "source.cluster.alias": "source",
              "key.converter": "org.apache.kafka.connect.converters.ByteArrayConverter",
              "value.converter": "org.apache.kafka.connect.converters.ByteArrayConverter",
              "source->target.enabled": "true",
              "target->source.enabled": "false",
              "sync.topic.configs.interval.seconds": "5",
              "sync.topics.configs.enabled": "true",
              "source.cluster.ssl.truststore.type": "PEM",
              "target.cluster.ssl.truststore.type": "PEM",
              "source.cluster.ssl.truststore.location": "/opt/kafka/connect-certs/ca/ca.crt",
              "target.cluster.ssl.truststore.location": "/opt/kafka/connect-certs/ca/ca.crt",
              JAAS_CONFIG_SOURCE
              JAAS_CONFIG_TARGET
              "source.cluster.security.protocol": "SECURITY_PROTOCOL",
              "target.cluster.security.protocol": "SECURITY_PROTOCOL",
              "source.cluster.sasl.mechanism": "SASL_MECHANISM",
              "target.cluster.sasl.mechanism": "SASL_MECHANISM"
            }
          }
          EOF

          sed -i "s/CONNECTOR_NAME/$CONNECTOR_NAME/g" /tmp/mm2-conf.json
          sed -i "s/SASL_MECHANISM/$SASL_MECHANISM/g" /tmp/mm2-conf.json
          sed -i "s/SECURITY_PROTOCOL/$SECURITY_PROTOCOL/g" /tmp/mm2-conf.json
          set +x
          sed -i "s/JAAS_CONFIG_SOURCE/$JAAS_CONFIG_SOURCE/g" /tmp/mm2-conf.json
          sed -i "s/JAAS_CONFIG_TARGET/$JAAS_CONFIG_TARGET/g" /tmp/mm2-conf.json
          set -x

          max_iteration=10
          for i in $(seq 1 $max_iteration)
          do
            curl -v -H 'Content-Type: application/json' http://{{ include "console.fullname" $consoleValues }}:{{ include "console.containerPort" $consoleValues }}/api/kafka-connect/clusters/connectors/connectors \
            -d @/tmp/mm2-conf.json && echo

            result=$?
            if [[ $result -eq 0 ]]
            then
              echo "Result successful"
              break
            else
              echo "Result unsuccessful"
              sleep 1
            fi
          done

          if [[ $result -ne 0 ]]
          then
            echo "mm2 connector can not be created!!!"
            exit 1
          fi

          rpk topic consume source.{{ $testTopic }} -n 1 {{ include "rpk-topic-flags" . }}

          for i in $(seq 1 $max_iteration)
          do
            curl -v -X DELETE http://{{ include "console.fullname" $consoleValues }}:{{ include "console.containerPort" $consoleValues }}/api/kafka-connect/clusters/connectors/connectors/$CONNECTOR_NAME && echo

            result=$?
            if [[ $result -eq 0 ]]
            then
              echo "Result successful"
              break
            else
              echo "Result unsuccessful"
              sleep 1
            fi
          done

          if [[ $result -ne 0 ]]
          then
            echo "mm2 connector can not be destroyed!!!"
            exit 1
          fi

          rpk topic list {{ include "rpk-topic-flags" . }}
          rpk topic delete {{ $testTopic }} source.{{ $testTopic }} mm2-offset-syncs.test-only-redpanda.internal {{ include "rpk-topic-flags" . }}
      volumeMounts: {{ include "default-mounts" . | nindent 8 }}
  volumes: {{ include "default-volumes" . | nindent 4 }}
{{- end }}
