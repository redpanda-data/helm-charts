{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if and .Values.tests.enabled .Values.connectors.enabled .Values.console.enabled }}
{{- $sasl := .Values.auth.sasl }}
{{- $root := deepCopy . }}
{{- $values := .Values }}
{{ $consoleValues := dict "Values" (deepCopy .Values.console) "Release" .Release "Chart" .Subcharts.console.Chart }}
{{ $connectorsVars := dict "Values" (deepCopy .Values.connectors) "Release" .Release "Chart" .Subcharts.connectors.Chart }}
{{/* brokers */}}
{{- $kafkaBrokers := list }}
{{- range (include "seed-server-list" . | mustFromJson) }}
  {{- $kafkaBrokers = append $kafkaBrokers (printf "%s:%s" . ($values.listeners.kafka.port | toString)) }}
{{- end }}
{{- $brokersString := join "," $kafkaBrokers}}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "redpanda.fullname" . | trunc 54 }}-test-connectors-via-console
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
    {{- . | nindent 4 }}
  {{- end }}
    test-name: test-connectors-via-console
  annotations:
    test-name: test-connectors-via-console
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: {{ include "pod-security-context" . | nindent 4 }}
  {{- with .Values.imagePullSecrets }}
  imagePullSecrets: {{- toYaml . | nindent 4 }}
  {{- end }}
  containers:
    - name: {{ template "redpanda.name" . }}
      image: {{ .Values.image.repository }}:{{ template "redpanda.tag" . }}
      env:
        - name: TLS_ENABLED
          value: {{ (include "kafka-internal-tls-enabled" . | fromJson).bool | quote }}
      command:
        - /bin/bash
        - -c
        - |
          set -xe
          
          trap connectorsState ERR

          connectorsState () {
            echo check connectors expand status
            curl {{ template "curl-options" . }} http://{{ include "connectors.serviceName" $connectorsVars }}:{{ (deepCopy .Values.connectors).connectors.restPort }}/connectors?expand=status
            echo check connectors expand info
            curl {{ template "curl-options" . }} http://{{ include "connectors.serviceName" $connectorsVars }}:{{ (deepCopy .Values.connectors).connectors.restPort }}/connectors?expand=info
            echo check connector configuration
            curl {{ template "curl-options" . }} http://{{ include "connectors.serviceName" $connectorsVars }}:{{ (deepCopy .Values.connectors).connectors.restPort }}/connectors/$CONNECTOR_NAME
            echo check connector topics
            curl {{ template "curl-options" . }} http://{{ include "connectors.serviceName" $connectorsVars }}:{{ (deepCopy .Values.connectors).connectors.restPort }}/connectors/$CONNECTOR_NAME/topics
          }
          
          {{- if .Values.auth.sasl.enabled }}
          set -e
          set +x

          echo "SASL enabled: reading credentials from $(find /etc/secrets/users/* -print)"
          IFS=":" read -r {{ include "rpk-sasl-environment-variables" . }} < <(grep "" $(find /etc/secrets/users/* -print))
          {{- if (include "redpanda-atleast-23-2-1" . | fromJson).bool }}
          RPK_SASL_MECHANISM=${RPK_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          {{- else }}
          REDPANDA_SASL_MECHANISM=${REDPANDA_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          RPK_USER="${REDPANDA_SASL_USERNAME}"
          RPK_PASS="${REDPANDA_SASL_PASSWORD}"
          RPK_SASL_MECHANISM="${REDPANDA_SASL_MECHANISM}"
          {{- end }}
          export {{ include "rpk-sasl-environment-variables" . }}

          JAAS_CONFIG_SOURCE="\"source.cluster.sasl.jaas.config\": \"org.apache.kafka.common.security.scram.ScramLoginModule required username=\\\\"\"${RPK_USER}\\\\"\" password=\\\\"\"${RPK_PASS}\\\\"\";\","
          JAAS_CONFIG_TARGET="\"target.cluster.sasl.jaas.config\": \"org.apache.kafka.common.security.scram.ScramLoginModule required username=\\\\"\"${RPK_USER}\\\\"\" password=\\\\"\"${RPK_PASS}\\\\"\";\","
          set -x
          set +e
          {{- end }}

          {{- $testTopic := printf "test-topic-%s" (randNumeric 3) }}
          rpk topic create {{ $testTopic }}
          rpk topic list
          echo "Test message!" | rpk topic produce {{ $testTopic }}

          SECURITY_PROTOCOL=PLAINTEXT
          if [[ -n "$RPK_SASL_MECHANISM" && $TLS_ENABLED == "true" ]]; then
            SECURITY_PROTOCOL="SASL_SSL"
          elif [[ -n "$RPK_SASL_MECHANISM" ]]; then
            SECURITY_PROTOCOL="SASL_PLAINTEXT"
          elif [[ $TLS_ENABLED == "true" ]]; then
            SECURITY_PROTOCOL="SSL"
          fi

          CONNECTOR_NAME=mm2-$RANDOM
          cat << 'EOF' > /tmp/mm2-conf.json
          {
            "connectorName": "CONNECTOR_NAME",
            "config": {
              "connector.class": "org.apache.kafka.connect.mirror.MirrorSourceConnector",
              "topics": "{{ $testTopic }}",
              "replication.factor": "1",
              "tasks.max": "1",
              "source.cluster.bootstrap.servers": {{ $brokersString | quote }},
              "target.cluster.bootstrap.servers": {{ $brokersString | quote }},
              "target.cluster.alias": "test-only-redpanda",
              "source.cluster.alias": "source",
              "key.converter": "org.apache.kafka.connect.converters.ByteArrayConverter",
              "value.converter": "org.apache.kafka.connect.converters.ByteArrayConverter",
              "source->target.enabled": "true",
              "target->source.enabled": "false",
              "sync.topic.configs.interval.seconds": "5",
              "sync.topics.configs.enabled": "true",
              "source.cluster.ssl.truststore.type": "PEM",
              "target.cluster.ssl.truststore.type": "PEM",
              "source.cluster.ssl.truststore.location": "/opt/kafka/connect-certs/ca/ca.crt",
              "target.cluster.ssl.truststore.location": "/opt/kafka/connect-certs/ca/ca.crt",
              JAAS_CONFIG_SOURCE
              JAAS_CONFIG_TARGET
              "source.cluster.security.protocol": "SECURITY_PROTOCOL",
              "target.cluster.security.protocol": "SECURITY_PROTOCOL",
              "source.cluster.sasl.mechanism": "SASL_MECHANISM",
              "target.cluster.sasl.mechanism": "SASL_MECHANISM"
            }
          }
          EOF

          sed -i "s/CONNECTOR_NAME/$CONNECTOR_NAME/g" /tmp/mm2-conf.json
          sed -i "s/SASL_MECHANISM/$RPK_SASL_MECHANISM/g" /tmp/mm2-conf.json
          sed -i "s/SECURITY_PROTOCOL/$SECURITY_PROTOCOL/g" /tmp/mm2-conf.json
          set +x
          sed -i "s/JAAS_CONFIG_SOURCE/$JAAS_CONFIG_SOURCE/g" /tmp/mm2-conf.json
          sed -i "s/JAAS_CONFIG_TARGET/$JAAS_CONFIG_TARGET/g" /tmp/mm2-conf.json
          set -x

          URL=http://{{ include "console.fullname" $consoleValues }}:{{ include "console.containerPort" $consoleValues }}/api/kafka-connect/clusters/connectors/connectors
          {{/* outputting to /dev/null because the output contains the user password */}}
          echo "Creating mm2 connector"
          curl {{ template "curl-options" . }} -H 'Content-Type: application/json' "${URL}" -d @/tmp/mm2-conf.json

          rpk topic consume source.{{ $testTopic }} -n 1

          echo "Destroying mm2 connector"
          curl {{ template "curl-options" . }} -X DELETE "${URL}/${CONNECTOR_NAME}"

          rpk topic list
          rpk topic delete {{ $testTopic }} source.{{ $testTopic }} mm2-offset-syncs.test-only-redpanda.internal
      volumeMounts: {{ include "default-mounts" . | nindent 8 }}
      securityContext: {{ include "container-security-context" . | nindent 8 }}
  volumes: {{ include "default-volumes" . | nindent 4 }}
{{- end }}
