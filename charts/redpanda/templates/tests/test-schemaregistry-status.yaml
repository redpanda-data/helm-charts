{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if and .Values.tests.enabled (not (include "schemaRegistry-internal-tls-enabled" . | fromJson).bool) .Values.listeners.schemaRegistry.enabled (include "redpanda-22-2-x-without-sasl" . | fromJson).bool }}
  {{- $sasl := .Values.auth.sasl }}
  {{- $randNumber := randNumeric 3 }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "redpanda.fullname" . }}-test-sr-status-{{ $randNumber }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
    {{- . | nindent 4 }}
  {{- end }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: {{ include "pod-security-context" . | nindent 4 }}
  {{- with .Values.imagePullSecrets }}
  imagePullSecrets: {{- toYaml . | nindent 4 }}
  {{- end }}
  containers:
    - name: {{ template "redpanda.name" . }}
      image: {{ .Values.image.repository }}:{{ template "redpanda.tag" . }}
      command: [ "/bin/bash", "-c" ]
      args:
        - |
  {{- if .Values.auth.sasl.enabled }}
          old_setting=${-//[^x]/}
          set +x
          IFS=: read -r {{ include "rpk-sasl-environment-variables" . }} < <(grep "" $(find /etc/secrets/users/* -print))
          {{- if (include "redpanda-atleast-23-2-1" . | fromJson).bool }}
          RPK_SASL_MECHANISM=${RPK_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          {{- else }}
          REDPANDA_SASL_MECHANISM=${REDPANDA_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          {{- end }}
          export {{ include "rpk-sasl-environment-variables" . }}
          RPK_USER="${RPK_USER:-${REDPANDA_SASL_USERNAME}}"
          RPK_PASS="${RPK_PASS:-${REDPANDA_SASL_PASSWORD}}"
          if [[ -n "$old_setting" ]]; then set -x; fi
  {{- end }}

          set -e

          trap reportSchema ERR

          reportSchema () {
            echo Retrieving schemas/types
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/schemas/types
            echo Retrieving schemas/ids/1
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/schemas/ids/1
            echo Retrieving subjects
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects
            echo Retrieving subjects?deleted=true
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects?deleted=true
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions?deleted=true
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions?deleted=true
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest?deleted=true
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest?deleted=true
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest/schema
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest/schema
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest/schema?deleted=true
            schemaCurlIgnore http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest/schema?deleted=true
            echo
          }

          schemaCurlIgnore () {
            curl {{ template "curl-options" . }} \
              {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u "${RPK_USER}:${RPK_PASS}" \
              {{- end }}
              $* || true
          }

          schemaCurl () {
            curl {{ template "curl-options" . }} \
            {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
            -u ${RPK_USER}:${RPK_PASS} \
            {{- end }}
            $*
          }

          schemaCurl http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/schemas/types

          echo "Get existng schemas"
          schemaCurl http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects

          echo "Create schema"
          curl {{ template "curl-options" . }} \
          -X POST -H 'Content-Type:application/vnd.schemaregistry.v1+json' \
          -d '{"schema":"{\"type\":\"record\",\"name\":\"sensor_sample\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"identifier\",\"type\":\"string\",\"logicalType\":\"uuid\"},{\"name\":\"value\",\"type\":\"long\"}]}"}' \
          {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
          -u ${RPK_USER}:${RPK_PASS} \
          {{- end }}
          http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions

          echo "Get schema 1"
          schemaCurl http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/schemas/ids/1

          echo "Get existng schemas"
          schemaCurl http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects

          max_iteration=10

          echo "Delete schema 1"
          for i in $(seq 1 $max_iteration)
          do
            curl {{ template "curl-options" . }} -X DELETE \
              {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u ${RPK_USER}:${RPK_PASS} \
              {{- end }}
              http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/1
            result=$?
            if [[ $result -eq 0 ]]
            then
              echo "Result successful"
              break
            else
              echo "Result unsuccessful"
              sleep 1
            fi
          done

          if [[ $result -ne 0 ]]
          then
            echo "All of the trials failed to delete schema!!!"
          fi

          echo "Delete schema 1 permanently"
          for i in $(seq 1 $max_iteration)
          do
            curl {{ template "curl-options" . }} -X DELETE \
              {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u ${RPK_USER}:${RPK_PASS} \
              {{- end }}
              http://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/1?permanent=true
            result=$?
            if [[ $result -eq 0 ]]
            then
              echo "Result successful"
              break
            else
              echo "Result unsuccessful"
              sleep 1
            fi
          done

          if [[ $result -ne 0 ]]
          then
            echo "All of the trials failed to permanently delete schema!!!"
            exit 1
          fi
      volumeMounts: {{ include "default-mounts" . | nindent 8 }}
      securityContext: {{ include "container-security-context" . | nindent 8 }}
  volumes: {{ include "default-volumes" . | nindent 4 }}
{{- end }}
