{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if and .Values.tests.enabled (include "schemaRegistry-internal-tls-enabled" . | fromJson).bool .Values.listeners.schemaRegistry.enabled (include "redpanda-22-2-x-without-sasl" . | fromJson).bool -}}
  {{- $service := .Values.listeners.schemaRegistry -}}
  {{- $cert := get .Values.tls.certs $service.tls.cert -}}
  {{- $root := deepCopy . }}
  {{- $sasl := .Values.auth.sasl }}
  {{- $randNumber := randNumeric 3 }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "redpanda.fullname" . }}-test-sr-internal-tls-status-{{ $randNumber }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
  {{- with include "full.labels" . }}
    {{- . | nindent 4 }}
  {{- end }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  restartPolicy: Never
  securityContext: {{ include "pod-security-context" . | nindent 4 }}
  {{- with .Values.imagePullSecrets }}
  imagePullSecrets: {{- toYaml . | nindent 4 }}
  {{- end }}
  containers:
    - name: {{ template "redpanda.name" . }}
      image: {{ .Values.image.repository }}:{{ template "redpanda.tag" . }}
      command: ["/bin/bash", "-c"]
      args:
        - |
  {{- if .Values.auth.sasl.enabled }}
          old_setting=${-//[^x]/}
          set +x
          IFS=: read -r {{ include "rpk-sasl-environment-variables" . }} < <(grep "" $(find /etc/secrets/users/* -print))
          {{- if (include "redpanda-atleast-23-2-1" . | fromJson).bool }}
          RPK_SASL_MECHANISM=${RPK_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          {{- else }}
          REDPANDA_SASL_MECHANISM=${REDPANDA_SASL_MECHANISM:-{{ .Values.auth.sasl.mechanism | upper }}}
          {{- end }}
          export {{ include "rpk-sasl-environment-variables" . }}
          RPK_USER="${RPK_USER:-${REDPANDA_SASL_USERNAME}}"
          RPK_PASS="${RPK_PASS:-${REDPANDA_SASL_PASSWORD}}"
          if [[ -n "$old_setting" ]]; then set -x; fi
  {{- end }}

          set -e

          trap reportSchema ERR

          reportSchema () {
            echo Retrieving schemas/types
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/schemas/types
            echo Retrieving schemas/ids/1
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/schemas/ids/1
            echo Retrieving subjects
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects
            echo Retrieving subjects?deleted=true
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects?deleted=true
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions?deleted=true
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions?deleted=true
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest?deleted=true
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest?deleted=true
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest/schema
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest/schema
            echo Retrieving subjects/sensor-{{ $randNumber }}-value/versions/latest/schema?deleted=true
            schemaCurlIgnore https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/latest/schema?deleted=true
            echo
          }


          schemaCurlIgnore () {
            curl {{ template "curl-options" . }} \
              {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u "${RPK_USER}:${RPK_PASS}" \
              {{- end }}
              {{- if $cert.caEnabled }}
              --cacert /etc/tls/certs/{{ $service.tls.cert }}/ca.crt \
              {{- end }}
              $* || true
          }

          schemaCurl () {
            curl {{ template "curl-options" . }} \
              {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u "${RPK_USER}:${RPK_PASS}" \
              {{- end }}
              {{- if $cert.caEnabled }}
              --cacert /etc/tls/certs/{{ $service.tls.cert }}/ca.crt \
              {{- end }}
              $*
          }

          echo "Get existng schemas"
          schemaCurl https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects

          echo "Create schema"
          curl {{ template "curl-options" . }} \
            -X POST -H 'Content-Type:application/vnd.schemaregistry.v1+json' \
            -d '{"schema": "{\"type\":\"record\",\"name\":\"sensor_sample\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"identifier\",\"type\":\"string\",\"logicalType\":\"uuid\"},{\"name\":\"value\",\"type\":\"long\"}]}"}' \
            {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u ${RPK_USER}:${RPK_PASS} \
            {{- end }}
            {{- if $cert.caEnabled }}
              --cacert /etc/tls/certs/{{ $service.tls.cert }}/ca.crt \
            {{- end }}
            https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions

          echo "Get schema 1"
          schemaCurl https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/schemas/ids/1

          echo "Get existng schemas"
          schemaCurl https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects

          echo "Delete schema 1"
          curl {{ template "curl-options" . }} -X DELETE \
            {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u ${RPK_USER}:${RPK_PASS} \
            {{- end }}
            {{- if $cert.caEnabled }}
              --cacert /etc/tls/certs/{{ $service.tls.cert }}/ca.crt \
            {{- end }}
              https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/1

          echo "Delete schema 1 permanently"
          curl {{ template "curl-options" . }} -X DELETE \
            {{- if or (include "sasl-enabled" .|fromJson).bool .Values.listeners.schemaRegistry.authenticationMethod }}
              -u ${RPK_USER}:${RPK_PASS} \
            {{- end }}
            {{- if $cert.caEnabled }}
              --cacert /etc/tls/certs/{{ $service.tls.cert }}/ca.crt \
            {{- end }}
              https://{{ include "redpanda.internal.domain" . }}:{{ .Values.listeners.schemaRegistry.port }}/subjects/sensor-{{ $randNumber }}-value/versions/1?permanent=true

      volumeMounts: {{ include "default-mounts" . | nindent 8 }}
      resources: {{ toYaml .Values.statefulset.resources | nindent 12 }}
      securityContext: {{ include "container-security-context" . | nindent 8 }}
  volumes: {{ include "default-volumes" . | nindent 4 }}
{{- end -}}
