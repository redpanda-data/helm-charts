{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if .Values.post_install_job.enabled }}
{{- $values := .Values }}
{{- $root := deepCopy . }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "redpanda.fullname" . }}-configuration
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
{{- with .Values.post_install_job.labels }}
  {{- toYaml . | nindent 4 }}
{{- end }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "-5"
{{- with .Values.post_install_job.annotations }}
  {{- toYaml . | nindent 4 }}
{{- end }}
spec:
  template:
    metadata:
      generateName: "{{ .Release.Name }}-post-"
      labels:
        app.kubernetes.io/name: {{ template "redpanda.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/component: {{ (include "redpanda.name" .) | trunc 50  }}-post-install
{{- with .Values.commonLabels }}
  {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
    {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with ( include "post-install-job-affinity" . ) }}
      affinity: {{- . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}
      restartPolicy: Never
      securityContext: {{ include "pod-security-context" . | nindent 8 }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
    {{- end }}
      containers:
      - name: {{ template "redpanda.name" . }}-post-install
        image: {{ .Values.image.repository }}:{{ template "redpanda.tag" . }}
        {{ (dict "env" (prepend
            (include "tiered-storage-env-vars" . | fromJsonArray)
            (include "secret-ref-or-value" (dict
                "Name" "REDPANDA_LICENSE"
                "Value" (include "enterprise-license" .)
                "SecretName" (include "enterprise-secret-name" .)
                "SecretKey" (include "enterprise-secret-key" .)
            ) | fromJson)
         | compact)) | toYaml | nindent 8 }}
        command: ["bash","-c"]
        args:
          - |
            set -e
        {{- if (include "redpanda-atleast-22-2-0" . | fromJson).bool }}
            if [[ -n "$REDPANDA_LICENSE" ]] then
              rpk cluster license set "$REDPANDA_LICENSE"
            fi
        {{- end }}

            {{/* ### Here be dragons ### 
            This block of bash configures cluster configuration settings by
            pulling them from environment variables.

            This allows us to support configurations from secrets or their raw
            values.

            WARNING: There is a small race condition here. `rpk cluster config
            import` will reset any values that are not specified. To work
            around this, we first export the the configuration. If there's a
            change to the configuration while we're updating the exported
            config on disk, said change will be reverted.

            TODO(chrisseto): Consolidate all cluster configuration setting to
            this job.
            */}}

            {{/* First: dump the existing cluster configuration.

            We need to use config import to handle conditional configurations
            (e.g. cloud_storage_enabled). Maintaining a DAG of configurations
            is not an option for the helm chart. */}}
            rpk cluster config export -f /tmp/cfg.yml

            {{/* Second: For each environment variable with the prefix RPK
            ("${!RPK_@}"), use `rpk redpanda config set` to update the exported
            config.

            Lots of Bash Jargon here:
                "${KEY#*RPK_}" => Strip the RPK_ prefix from KEY.
                "${config,,}" => config.toLower()
                "${!KEY}" => Dynamic variable resolution. ie: What is the value of the variable with a name equal to the value of $KEY?
            */}}
            for KEY in "${!RPK_@}"; do
              config="${KEY#*RPK_}"
              rpk redpanda config set --config /tmp/cfg.yml "${config,,}" "${!KEY}"
            done

            {{/*
            The updated file is then loaded via `rpk cluster config import` which
            ensures that conditional configurations (cloud_storage_enabled)
            "see" all their dependent keys.
            */}}
            rpk cluster config import -f /tmp/cfg.yml
        {{- with .Values.post_install_job.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        securityContext: {{ include "container-security-context" . | nindent 10 }}
        volumeMounts: {{- include "default-mounts" . | nindent 10 }}
      volumes: {{ include "default-volumes" . | nindent 8 }}
      serviceAccountName: {{ include "redpanda.serviceAccountName" . }}
{{- end -}}
