{{- /*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- $values := .Values }}
{{- $users := list -}}
{{- if .Values.auth.sasl.enabled -}}
  {{- range $user := .Values.auth.sasl.users -}}
    {{- $users = append $users $user.name -}}
  {{- end -}}
{{- end -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redpanda.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
data:
{{- if (include "redpanda-atleast-22-1-1" . | fromJson).bool }}
  bootstrap.yaml: |
    enable_sasl: {{ dig "sasl" "enabled" false .Values.auth }}
  {{- if $users }}
    superusers: {{ toJson $users }}
  {{- end }}
  {{- with (dig "cluster" dict .Values.config) }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- include "tunable" . }}
  {{- if and (not (hasKey .Values.config.cluster "storage_min_free_bytes")) ((include "redpanda-atleast-22-2-0" . | fromJson).bool) }}
    storage_min_free_bytes: {{ include "storage-min-free-bytes" . }}
  {{- end }}
{{- end }}
{{- if and (include "is-licensed" . | fromJson).bool .Values.storage.tieredConfig.cloud_storage_enabled }}
  {{- $tieredStorageConfig := deepCopy .Values.storage.tieredConfig }}
  {{- $tieredStorageConfig = unset $tieredStorageConfig "cloud_storage_cache_directory" }}
  {{- if (include "redpanda-atleast-22-3-0" . | fromJson).bool }}
    {{- toYaml $tieredStorageConfig | nindent 4 }}
  {{- else }}
    {{- unset $tieredStorageConfig "cloud_storage_credentials_source" | toYaml | nindent 4 }}
  {{- end }}
{{- end }}
  redpanda.yaml: |
    config_file: /etc/redpanda/redpanda.yaml
{{- if .Values.logging.usageStats.enabled }}
  {{- with (dig "usageStats" "organization" "" .Values.logging) }}
    organization: {{ . }}
  {{- end }}
  {{- with (dig "usageStats" "clusterId" "" .Values.logging) }}
    cluster_id: {{ . }}
  {{- end }}
{{- end }}
    redpanda:
{{- if (include "redpanda-atleast-22-3-0" . | fromJson).bool }}
      empty_seed_starts_cluster: false
  {{- if .Values.rackAwareness.enabled }}
      enable_rack_awareness: true
  {{- end }}
{{- end }}
{{- if not (include "redpanda-atleast-22-1-1" . | fromJson).bool }}
      enable_sasl: {{ dig "sasl" "enabled" false .Values.auth }}
  {{- if $users }}
      superusers: {{ toJson $users }}
  {{- end }}
  {{- with (dig "cluster" dict .Values.config) }}
      {{- toYaml . | nindent 6 }}
  {{- end }}
  {{- with (dig "tunable" dict .Values.config) }}
      {{- toYaml . | nindent 6 }}
  {{- end }}
  {{- if not (hasKey .Values.config.cluster "storage_min_free_bytes") }}
      storage_min_free_bytes: {{ include "storage-min-free-bytes" . }}
  {{- end }}
{{- end }}
      {{- with dig "node" dict .Values.config }}
      {{- . | toYaml | nindent 6 }}
      {{- end }}
{{- /* LISTENERS */}}
{{- /* Admin API */}}
{{- $service := .Values.listeners.admin }}
      admin:
        name: admin
        address: 0.0.0.0
        port: {{ $service.port }}
{{- if (include "admin-internal-tls-enabled" . | fromJson).bool }}
      admin_api_tls:
        name: admin
        enabled: true
        cert_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.crt
        key_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.key
        require_client_auth: {{ $service.tls.requireClientAuth }}
  {{- $cert := get .Values.tls.certs $service.tls.cert }}
  {{- if empty $cert }}
    {{- fail (printf "Certificate, '%s', used but not defined")}}
  {{- end }}
  {{- if $cert.caEnabled }}
        truststore_file: /etc/tls/certs/{{ $service.tls.cert }}/ca.crt
  {{- else }}
        {{- /* This is a required field so we use the default in the redpanda debian container */}}
        truststore_file: /etc/ssl/certs/ca-certificates.crt
  {{- end }}
{{- end }}
{{- /* Kafka API */}}
{{- $service = .Values.listeners.kafka }}
      kafka_api:
        - name: internal
          address: 0.0.0.0
          port: {{ $service.port }}
{{- range $name, $listener := .Values.listeners.kafka.external }}
        - name: {{ $name }}
          address: 0.0.0.0
          port: {{ $listener.port }}
{{- end }}
      kafka_api_tls:
{{- if (include "kafka-internal-tls-enabled" . | fromJson).bool }}
        - name: internal
          enabled: true
          cert_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.crt
          key_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.key
          require_client_auth: {{ $service.tls.requireClientAuth }}
  {{- $cert := get .Values.tls.certs $service.tls.cert }}
  {{- if empty $cert }}
    {{- fail (printf "Certificate, '%s', used but not defined")}}
  {{- end }}
  {{- if $cert.caEnabled }}
          truststore_file: /etc/tls/certs/{{ $service.tls.cert }}/ca.crt
  {{- else }}
          {{- /* This is a required field so we use the default in the redpanda debian container */}}
          truststore_file: /etc/ssl/certs/ca-certificates.crt
  {{- end }}
{{- end }}
{{- range $name, $listener := $service.external }}
  {{- $k := dict "Values" $values "listener" $listener }}
  {{- if (include "kafka-external-tls-enabled" $k | fromJson).bool }}
    {{- $mtls := dig "tls" "requireClientAuth" false $listener }}
    {{- $mtls = dig "tls" "requireClientAuth" $mtls $k }}
    {{- $certName := include "kafka-external-tls-cert" $k }}
    {{- $certPath := printf "/etc/tls/certs/%s" $certName }}
    {{- $cert := get $values.tls.certs $certName }}
    {{- if empty $cert }}
      {{- fail (printf "Certificate, '%s', used but not defined")}}
    {{- end }}
        - name: {{ $name }}
          enabled: true
          cert_file: {{ $certPath }}/tls.crt
          key_file: {{ $certPath }}/tls.key
          require_client_auth: {{ $mtls }}
    {{- if $cert.caEnabled }}
          truststore_file: {{ $certPath }}/ca.crt
    {{- else }}
          {{- /* This is a required field so we use the default in the redpanda debian container */}}
          truststore_file: /etc/ssl/certs/ca-certificates.crt
    {{- end }}
  {{- end }}
{{- end }}
{{- /* RPC Server */}}
{{- $service = .Values.listeners.rpc }}
      rpc_server:
        address: 0.0.0.0
        port: {{ $service.port }}
{{- if (include "rpc-tls-enabled" . | fromJson).bool }}
      rpc_server_tls:
        enabled: true
        cert_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.crt
        key_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.key
        require_client_auth: {{ $service.tls.requireClientAuth }}
  {{- $cert := get .Values.tls.certs $service.tls.cert }}
  {{- if empty $cert }}
    {{- fail (printf "Certificate, '%s', used but not defined")}}
  {{- end }}
  {{- if $cert.caEnabled }}
        truststore_file: /etc/tls/certs/{{ $service.tls.cert }}/ca.crt
  {{- else }}
        {{- /* This is a required field so we use the default in the redpanda debian container */}}
        truststore_file: /etc/ssl/certs/ca-certificates.crt
  {{- end }}
{{- end }}
      seed_servers:
{{- range (include "seed-server-list" . | mustFromJson) }}
        - host:
            address: {{ . }}
            port: {{ $values.listeners.rpc.port }}
{{- end }}
{{- if and (include "is-licensed" . | fromJson).bool .Values.storage.tieredConfig.cloud_storage_enabled }}
  {{- if (include "redpanda-atleast-22-3-0" . | fromJson).bool }}
    {{- toYaml .Values.storage.tieredConfig | nindent 6 }}
  {{- else }}
    {{- unset .Values.storage.tieredConfig "cloud_storage_credentials_source" | toYaml | nindent 6 }}
  {{- end }}
{{- end }}
{{- /* Schema Registry API */}}
{{- if .Values.listeners.schemaRegistry.enabled }}
  {{- $service = .Values.listeners.schemaRegistry }}
    schema_registry:
      schema_registry_api:
        - name: internal
          address: 0.0.0.0
          port: {{ $service.port }}
  {{- range $name, $listener := $service.external }}
        - name: {{ $name }}
          address: 0.0.0.0
          {{- /*
            when upgrading from an older version that had a missing port, fail if we cannot guess a default
            this should work in all cases as the older versions would have failed with multiple listeners anyway
          */}}
          {{- if and (empty $listener.port) (ne (len $service.external) 1) }}
            {{- fail "missing required port for schemaRegistry listener $listener.name" }}
          {{- end }}
          port: {{ $listener.port | default 8084 }}
  {{- end }}
      schema_registry_api_tls:
  {{- if (include "schemaRegistry-internal-tls-enabled" . | fromJson).bool }}
        - name: internal
          enabled: true
          cert_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.crt
          key_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.key
          require_client_auth: {{ $service.tls.requireClientAuth }}
    {{- $cert := get .Values.tls.certs $service.tls.cert }}
    {{- if empty $cert }}
      {{- fail (printf "Certificate, '%s', used but not defined")}}
    {{- end }}
    {{- if $cert.caEnabled }}
          truststore_file: /etc/tls/certs/{{ $service.tls.cert }}/ca.crt
    {{- else }}
          {{- /* This is a required field so we use the default in the redpanda debian container */}}
          truststore_file: /etc/ssl/certs/ca-certificates.crt
    {{- end }}
  {{- end }}
  {{- range $name, $listener := $service.external }}
    {{- $k := dict "Values" $values "listener" $listener }}
    {{- if (include "schemaRegistry-external-tls-enabled" $k | fromJson).bool }}
      {{- $mtls := dig "tls" "requireClientAuth" false $listener }}
      {{- $mtls = dig "tls" "requireClientAuth" $mtls $k }}
      {{- $certName := include "schemaRegistry-external-tls-cert" $k }}
      {{- $certPath := printf "/etc/tls/certs/%s" $certName }}
      {{- $cert := get $values.tls.certs $certName }}
      {{- if empty $cert }}
        {{- fail (printf "Certificate, '%s', used but not defined")}}
      {{- end }}
        - name: {{ $name }}
          enabled: true
          cert_file: {{ $certPath }}/tls.crt
          key_file: {{ $certPath }}/tls.key
          require_client_auth: {{ $mtls }}
      {{- if $cert.caEnabled }}
          truststore_file: {{ $certPath }}/ca.crt
      {{- else }}
          {{- /* This is a required field so we use the default in the redpanda debian container */}}
          truststore_file: /etc/ssl/certs/ca-certificates.crt
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
{{- /* HTTP Proxy */}}
{{- if .Values.listeners.http.enabled }}
  {{- $service = .Values.listeners.http }}
    pandaproxy:
      pandaproxy_api:
        - name: internal
          address: 0.0.0.0
          port: {{ $service.port }}
  {{- range $name, $listener := $service.external }}
        - name: {{ $name }}
          address: 0.0.0.0
          port: {{ $listener.port }}
  {{- end }}
      pandaproxy_api_tls:
  {{- if (include "http-internal-tls-enabled" . | fromJson).bool }}
        - name: internal
          enabled: true
          cert_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.crt
          key_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.key
          require_client_auth: {{ $service.tls.requireClientAuth }}
    {{- $cert := get .Values.tls.certs $service.tls.cert }}
    {{- if empty $cert }}
      {{- fail (printf "Certificate, '%s', used but not defined")}}
    {{- end }}
    {{- if $cert.caEnabled }}
          truststore_file: /etc/tls/certs/{{ $service.tls.cert }}/ca.crt
    {{- else }}
          {{- /* This is a required field so we use the default in the redpanda debian container */}}
          truststore_file: /etc/ssl/certs/ca-certificates.crt
    {{- end }}
  {{- end }}
  {{- range $name, $listener := $service.external }}
    {{- $k := dict "Values" $values "listener" $listener }}
    {{- if (include "http-external-tls-enabled" $k | fromJson).bool }}
      {{- $mtls := dig "tls" "requireClientAuth" false $listener }}
      {{- $mtls = dig "tls" "requireClientAuth" $mtls $k }}
      {{- $certName := include "http-external-tls-cert" $k }}
      {{- $certPath := printf "/etc/tls/certs/%s" $certName }}
      {{- $cert := get $values.tls.certs $certName }}
      {{- if empty $cert }}
        {{- fail (printf "Certificate, '%s', used but not defined")}}
      {{- end }}
        - name: {{ $name }}
          enabled: true
          cert_file: {{ $certPath }}/tls.crt
          key_file: {{ $certPath }}/tls.key
          require_client_auth: {{ $mtls }}
      {{- if $cert.caEnabled }}
          truststore_file: {{ $certPath }}/ca.crt
      {{- else }}
          {{- /* This is a required field so we use the default in the redpanda debian container */}}
          truststore_file: /etc/ssl/certs/ca-certificates.crt
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
{{- /* END LISTENERS */}}

    rpk:
      enable_usage_stats: {{ .Values.logging.usageStats.enabled }}
      overprovisioned: {{ dig "cpu" "overprovisioned" false .Values.resources }}
      enable_memory_locking: {{ dig "memory" "enable_memory_locking" false .Values.resources }}
{{- if hasKey .Values.tuning "tune_aio_events" }}
      tune_aio_events: {{ .Values.tuning.tune_aio_events }}
{{- end }}
{{- if hasKey .Values.tuning "tune_clocksource" }}
      tune_clocksource: {{ .Values.tuning.tune_clocksource }}
{{- end }}
{{- if hasKey .Values.tuning "tune_ballast_file" }}
      tune_ballast_file: {{ .Values.tuning.tune_ballast_file }}
{{- end }}
{{- if hasKey .Values.tuning "ballast_file_path" }}
      ballast_file_path: {{ .Values.tuning.ballast_file_path }}
{{- end }}
{{- if hasKey .Values.tuning "ballast_file_size" }}
      ballast_file_size: {{ .Values.tuning.ballast_file_size }}
{{- end }}
{{- if hasKey .Values.tuning "well_known_io" }}
      well_known_io: {{ .Values.tuning.well_known_io }}
{{- end }}
