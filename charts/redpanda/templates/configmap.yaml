{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- $values := .Values }}
{{- $users := list -}}
{{- if .Values.auth.sasl.enabled -}}
  {{- range $user := .Values.auth.sasl.users -}}
    {{- $users = append $users $user.name -}}
  {{- end -}}
{{- end -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redpanda.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    helm.sh/chart: {{ template "redpanda.chart" . }}
    app.kubernetes.io/name: {{ template "redpanda.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/component: {{ template "redpanda.name" . }}
{{- with .Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
{{- end }}
data:
{{- if (include "redpanda-atleast-22-1-1" . | fromJson).bool }}
  bootstrap.yaml: |
    enable_sasl: {{ dig "sasl" "enabled" false .Values.auth }}
  {{- if $users }}
    superusers: {{ toJson $users }}
  {{- end }}
  {{- with (dig "cluster" dict .Values.config) }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with (dig "tunable" dict .Values.config) }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if and (not (hasKey .Values.config.cluster "storage_min_free_bytes")) ((include "redpanda-atleast-22-2-0" . | fromJson).bool) }}
    storage_min_free_bytes: {{ include "storage-min-free-bytes" . }}
  {{- end }}
{{- end }}
  redpanda.yaml: |
    config_file: /etc/redpanda/redpanda.yaml
{{- if .Values.logging.usageStats.enabled }}
  {{- with (dig "usageStats" "organization" "" .Values.logging) }}
    organization: {{ . }}
  {{- end }}
  {{- with (dig "usageStats" "clusterId" "" .Values.logging) }}
    cluster_id: {{ . }}
  {{- end }}
{{- end }}
    redpanda:
{{- if (include "redpanda-atleast-22-3-0" . | fromJson).bool }}
      empty_seed_starts_cluster: false
  {{- if .Values.rackAwareness.enabled }}
      enable_rack_awareness: true
  {{- end }}
{{- end }}
{{- if not (include "redpanda-atleast-22-1-1" . | fromJson).bool }}
      enable_sasl: {{ dig "sasl" "enabled" false .Values.auth }}
  {{- if $users }}
      superusers: {{ toJson $users }}
  {{- end }}
  {{- with (dig "cluster" dict .Values.config) }}
      {{- toYaml . | nindent 6 }}
  {{- end }}
  {{- with (dig "tunable" dict .Values.config) }}
      {{- toYaml . | nindent 6 }}
  {{- end }}
  {{- if not (hasKey "storage_min_free_bytes" .Values.config.cluster) }}
      storage_min_free_bytes: {{ include "storage-min-free-bytes" . }}
  {{- end }}
{{- end }}
      {{- with dig "node" dict .Values.config }}
      {{- . | toYaml | nindent 6 }}
      {{- end }}
      admin:
        name: admin
        address: 0.0.0.0
        port: {{ .Values.listeners.admin.port }}
{{- if (include "admin-internal-tls-enabled" . | fromJson).bool }}
      admin_api_tls:
        - name: admin
          enabled: true
          cert_file: /etc/tls/certs/{{ .Values.listeners.admin.tls.cert }}/tls.crt
          key_file: /etc/tls/certs/{{ .Values.listeners.admin.tls.cert }}/tls.key
          truststore_file: /etc/tls/certs/{{ .Values.listeners.admin.tls.cert }}/ca.crt
          require_client_auth: {{ .Values.listeners.admin.tls.requireClientAuth }}
{{- end }}
      kafka_api:
        - name: internal
          address: 0.0.0.0
          port: {{ .Values.listeners.kafka.port }}
{{- range $name, $listener := .Values.listeners.kafka.external }}
        - name: {{ $name }}
          address: 0.0.0.0
          port: {{ $listener.port }}
{{- end }}
      kafka_api_tls:
{{- $service := .Values.listeners.kafka }}
{{- if (include "kafka-internal-tls-enabled" . | fromJson).bool }}
        - name: internal
          enabled: true
          cert_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.crt
          key_file: /etc/tls/certs/{{ $service.tls.cert }}/tls.key
          truststore_file: /etc/tls/certs/{{ $service.tls.cert }}/ca.crt
          require_client_auth: {{ $service.tls.requireClientAuth }}
{{- end }}
{{- range $name, $listener := $service.external }}
  {{- $k := dict "Values" $values "listener" $listener }}
  {{- if (include "kafka-external-tls-enabled" $k | fromJson).bool }}
        - name: {{ $name }}
          enabled: true
          cert_file: /etc/tls/certs/{{ template "kafka-external-tls-cert" $k}}/tls.crt
          key_file: /etc/tls/certs/{{ template "kafka-external-tls-cert" $k}}/tls.key
          truststore_file: /etc/tls/certs/{{ template "kafka-external-tls-cert" $k}}/ca.crt
          require_client_auth: {{ dig "tls" "requireClientAuth" false $listener }}
  {{- end }}
{{- end }}
      rpc_server:
        address: 0.0.0.0
        port: {{ .Values.listeners.rpc.port }}
{{- if (include "rpc-tls-enabled" . | fromJson).bool }}
      rpc_server_tls:
        enabled: true
        require_client_auth: {{ .Values.listeners.rpc.tls.requireClientAuth }}
        cert_file: /etc/tls/certs/{{ .Values.listeners.rpc.tls.cert }}/tls.crt
        key_file: /etc/tls/certs/{{ .Values.listeners.rpc.tls.cert }}/tls.key
        truststore_file: /etc/tls/certs/{{ .Values.listeners.rpc.tls.cert }}/ca.crt
{{- end }}
      seed_servers:
{{- range untilStep 0 (.Values.statefulset.replicas|int) 1 }}
        - host:
            address: "{{ template "redpanda.fullname" $ }}-{{ . }}.{{ template "redpanda.internal.domain" $ }}"
            port: {{ $values.listeners.rpc.port }}
{{- end }}
{{- if .Values.listeners.schemaRegistry.enabled }}
    schema_registry:
      schema_registry:
        - name: internal
          address: 0.0.0.0
          port: {{ .Values.listeners.schemaRegistry.port }}
{{- range $name, $listener := .Values.listeners.schemaRegistry.external }}
        - name: {{ $name }}
          address: 0.0.0.0
          port: {{ $listener.port }}
{{- end }}
      schema_registry_api_tls:
  {{- if (include "schemaRegistry-internal-tls-enabled" . | fromJson).bool }}
        - name: internal
          enabled: true
          cert_file: /etc/tls/certs/{{ .Values.listeners.schemaRegistry.tls.cert }}/tls.crt
          key_file: /etc/tls/certs/{{ .Values.listeners.schemaRegistry.tls.cert }}/tls.key
          truststore_file: /etc/tls/certs/{{ .Values.listeners.schemaRegistry.tls.cert }}/ca.crt
          require_client_auth: {{ .Values.listeners.schemaRegistry.tls.requireClientAuth }}
  {{- end }}
  {{- range $i, $listener := .Values.listeners.schemaRegistry.external }}
    {{- $k := dict "Values" $values "listener" $listener }}
    {{- if (include "schemaRegistry-external-tls-enabled" $k | fromJson).bool }}
        - name: {{ $listener.name }}
          enabled: true
          cert_file: /etc/tls/certs/{{ template "schemaRegistry-external-tls-cert" $k }}/tls.crt
          key_file: /etc/tls/certs/{{ template "schemaRegistry-external-tls-cert" $k }}/tls.key
          truststore_file: /etc/tls/certs/{{ template "schemaRegistry-external-tls-cert" $k }}/ca.crt
          require_client_auth: {{ dig "tls" "requireClientAuth" false $listener}}
    {{- end }}
  {{- end }}
{{- end }}
{{- if .Values.listeners.http.enabled }}
    pandaproxy:
      pandaproxy_api:
        - name: internal
          address: 0.0.0.0
          port: {{ .Values.listeners.http.port }}
  {{- range $name, $listener := .Values.listeners.http.external }}
        - name: {{ $name }}
          address: 0.0.0.0
          port: {{ $listener.port }}
  {{- end }}
      pandaproxy_api_tls:
  {{- if (include "http-internal-tls-enabled" . | fromJson).bool }}
          - name: internal
            enabled: true
            cert_file: /etc/tls/certs/{{ .Values.listeners.http.tls.cert }}/tls.crt
            key_file: /etc/tls/certs/{{ .Values.listeners.http.tls.cert }}/tls.key
            truststore_file: /etc/tls/certs/{{ .Values.listeners.http.tls.cert }}/ca.crt
            require_client_auth: {{ .Values.listeners.http.tls.requireClientAuth }}
  {{- end }}
  {{- range $name, $listener := .Values.listeners.http.external }}
    {{- $k := dict "Values" $values "listener" $listener }}
    {{- if (include "http-external-tls-enabled" $k | fromJson).bool }}
          - name: {{ $name }}
            enabled: true
            cert_file: /etc/tls/certs/{{ template "kafka-external-tls-cert" $k }}/tls.crt
            key_file: /etc/tls/certs/{{ template "kafka-external-tls-cert" $k }}/tls.key
            truststore_file: /etc/tls/certs/{{ template "kafka-external-tls-cert" $k}}/ca.crt
            require_client_auth: {{ dig "tls" "requireClientAuth" false $listener }}
    {{- end }}
  {{- end }}
{{- end }}
    rpk:
      enable_usage_stats: {{ .Values.logging.usageStats.enabled }}
      overprovisioned: {{ dig "cpu" "overprovisioned" false .Values.resources }}
      enable_memory_locking: {{ dig "memory" "enable_memory_locking" false .Values.resources }}
{{- if hasKey .Values.tuning "tune_aio_events" }}
      tune_aio_events: {{ .Values.tuning.tune_aio_events }}
{{- end }}
{{- if hasKey .Values.tuning "tune_clocksource" }}
      tune_clocksource: {{ .Values.tuning.tune_clocksource }}
{{- end }}
{{- if hasKey .Values.tuning "tune_ballast_file" }}
      tune_ballast_file: {{ .Values.tuning.tune_ballast_file }}
{{- end }}
{{- if hasKey .Values.tuning "ballast_file_path" }}
      ballast_file_path: {{ .Values.tuning.ballast_file_path }}
{{- end }}
{{- if hasKey .Values.tuning "ballast_file_size" }}
      ballast_file_size: {{ .Values.tuning.ballast_file_size }}
{{- end }}
{{- if hasKey .Values.tuning "well_known_io" }}
      well_known_io: {{ .Values.tuning.well_known_io }}
{{- end }}
