{{- if .Values.mock.kafka }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "console.fullname" . }}-mock-redpanda
  labels:
    app.kubernetes.io/name: {{ include "console.fullname" . }}-mock-kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "console.fullname" . }}-mock-kafka
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-mock.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "console.fullname" . }}-mock-kafka
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: {{ include "mock.kafka.image" . }}
          imagePullPolicy: {{ .Values.mock.kafka.image.pullPolicy }}
          env:
            - name: SERVICE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  RESULT=$(curl --silent --fail -k  "http://${SERVICE_NAME}.{{.Release.Namespace}}.svc.cluster.local.:9644/v1/status/ready")
                  echo $RESULT
                  echo $RESULT | grep ready
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - curl --silent --fail -k  "http://${SERVICE_NAME}.{{.Release.Namespace}}.svc.cluster.local.:9644/v1/status/ready"
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 10
        # the readiness probe just checks that the cluster is healthy according to rpk cluster health.
        # It's ok that this cluster-wide check affects all the pods as it's only used for the
        # PodDisruptionBudget and we don't want to roll any pods if the Redpanda cluster isn't healthy.
        # https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  set -x
                  rpk cluster health --api-urls ${SERVICE_NAME}.{{.Release.Namespace}}.svc.cluster.local.:9644
                  rpk cluster health --api-urls ${SERVICE_NAME}.{{.Release.Namespace}}.svc.cluster.local.:9644 | grep 'Healthy:.*true'
            initialDelaySeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          command:
            - rpk
            - redpanda
            - start
            - --smp=1
            - --memory=2048M
            - --reserve-memory=205M
            - --default-log-level=info
            - --advertise-rpc-addr=$(SERVICE_NAME).{{.Release.Namespace}}.svc.cluster.local.:33145
          ports:
            - name: admin
              containerPort: 9644
            - name: admin-default
              containerPort: 9645
            - name: http
              containerPort: 8082
            - name: http-default
              containerPort: 8083
            - name: kafka
              containerPort: 9093
            - name: kafka-default
              containerPort: 9094
            - name: rpc
              containerPort: 33145
            - name: schemaregistry
              containerPort: 8081
            - name: schema-default
              containerPort: 8084
          securityContext:
            runAsUser: 101
            runAsGroup: 101
          volumeMounts:
            - name: datadir
              mountPath: /var/lib/redpanda/data
            - name: config
              mountPath: /etc/redpanda
          resources:
            limits:
              cpu: 1
              memory: 2.5Gi
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: mock-redpanda-datadir
        - name: redpanda
          configMap:
            name: redpanda
        - name: config
          emptyDir: {}

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mock-redpanda-datadir
  labels:
    app.kubernetes.io/name: {{ include "console.fullname" . }}-mock-kafka
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "20Gi"
{{- end }}