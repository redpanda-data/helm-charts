{{/*
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if .Values.deployment.create -}}
{{- $root := deepCopy . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "connectors.fullname" . }}
  labels:
{{- with include "full.labels" . }}
  {{- . | nindent 4 }}
{{- end }}
{{- with $.Values.deployment.annotations }}
  {{- toYaml . | nindent 4 }}
{{- end }}
spec:
  {{- with dig "replicas" "" .Values.deployment }}
  replicas: {{ . }}
  {{- end }}
  progressDeadlineSeconds: {{ .Values.deployment.progressDeadlineSeconds }}
  revisionHistoryLimit: {{ .Values.deployment.revisionHistoryLimit }}
  selector:
    matchLabels: {{ (include "connectors-pod-labels" .) | nindent 6 }}
  strategy: {{- toYaml .Values.deployment.strategy | nindent 4 }}
  template:
    metadata:
  {{- with $.Values.deployment.annotations }}
      annotations: {{- toYaml . | nindent 8 }}
  {{- end }}
      labels:
  {{- with include "connectors-pod-labels" . }}
    {{- . | nindent 8 }}
  {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds }}
      affinity:
  {{- with .Values.deployment.nodeAffinity }}
        nodeAffinity: {{- toYaml . | nindent 10 }}
  {{- end }}
  {{- with .Values.deployment.podAffinity }}
        podAffinity: {{- toYaml . | nindent 10 }}
  {{- end }}
  {{- if .Values.deployment.podAntiAffinity }}
        podAntiAffinity:
      {{- if eq .Values.deployment.podAntiAffinity.type "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: {{ .Values.deployment.podAntiAffinity.topologyKey }}
              namespaces:
                - {{ .Release.Namespace | quote }}
              labelSelector:
                matchLabels: {{ include "connectors-pod-labels" . | nindent 18 }}
      {{- else if eq .Values.deployment.podAntiAffinity.type "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.deployment.podAntiAffinity.weight | int64 }}
              podAffinityTerm:
                topologyKey: {{ .Values.deployment.podAntiAffinity.topologyKey }}
                labelSelector:
                  matchLabels: {{ include "connectors-pod-labels" . | nindent 20 }}
      {{- else if eq .Values.deployment.podAntiAffinity.type "custom" }}
          {{- toYaml .Values.deployment.podAntiAffinity.custom | nindent 10 }}
      {{- end }}
  {{- end }}
      serviceAccountName: {{ include "connectors.serviceAccountName" . }}
      containers:
        - name: connectors-cluster
          image: {{ .Values.image.repository }}:{{ include "connectors.tag" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
  {{- with .Values.container.securityContext }}
    {{- toYaml . | nindent 12 }}
  {{- end }}
        {{- with .Values.deployment.command }}
          command: {{ toJson . }}
        {{- end }}
          env:
            - name: CONNECT_CONFIGURATION
              value: |
                rest.advertised.port={{ .Values.connectors.restPort }}
                rest.port={{ .Values.connectors.restPort }}
                key.converter=org.apache.kafka.connect.converters.ByteArrayConverter
                value.converter=org.apache.kafka.connect.converters.ByteArrayConverter
                group.id={{ .Values.connectors.groupID }}
                offset.storage.topic={{ .Values.connectors.storage.topic.offset }}
                config.storage.topic={{ .Values.connectors.storage.topic.config }}
                status.storage.topic={{ .Values.connectors.storage.topic.status }}
                offset.storage.redpanda.remote.read={{ .Values.connectors.storage.remote.read.offset }}
                offset.storage.redpanda.remote.write={{ .Values.connectors.storage.remote.write.offset }}
                config.storage.redpanda.remote.read={{ .Values.connectors.storage.remote.read.config }}
                config.storage.redpanda.remote.write={{ .Values.connectors.storage.remote.write.config }}
                status.storage.redpanda.remote.read={{ .Values.connectors.storage.remote.read.status }}
                status.storage.redpanda.remote.write={{ .Values.connectors.storage.remote.write.status }}
                offset.storage.replication.factor={{ .Values.connectors.storage.replicationFactor.offset }}
                config.storage.replication.factor={{ .Values.connectors.storage.replicationFactor.config }}
                status.storage.replication.factor={{ .Values.connectors.storage.replicationFactor.status }}
                producer.linger.ms={{ .Values.connectors.producerLingerMS }}
                producer.batch.size={{ .Values.connectors.producerBatchSize }}
                config.providers=file,secretsManager
                config.providers.file.class=org.apache.kafka.common.config.provider.FileConfigProvider
                {{- if .Values.connectors.secretManager.enabled }}
                config.providers.secretsManager.class=com.github.jcustenborder.kafka.config.aws.SecretsManagerConfigProvider
                config.providers.secretsManager.param.secret.prefix={{ .Values.connectors.secretManager.consolePrefix }}{{ .Values.connectors.secretManager.connectorsPrefix }}
                config.providers.secretsManager.param.aws.region={{ .Values.connectors.secretManager.region }}
                {{- end }}
            - name: CONNECT_ADDITIONAL_CONFIGURATION
              value: {{ .Values.connectors.additionalConfiguration | quote }}
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: {{ .Values.connectors.bootstrapServers | quote }}
            {{- if .Values.connectors.schemaRegistryURL }}
            - name: SCHEMA_REGISTRY_URL
              value: {{ .Values.connectors.schemaRegistryURL | quote }}
            {{- end }}
            - name: CONNECT_GC_LOG_ENABLED
              value: {{ .Values.container.javaGCLogEnabled | quote }}
            - name: CONNECT_HEAP_OPTS
              value: -Xms256M -Xmx{{ .Values.container.resources.javaMaxHeapSize }}
            - name: CONNECT_LOG_LEVEL
              value: {{ .Values.logging.level }}
            {{- if and .Values.auth.sasl.userName .Values.auth.sasl.mechanism .Values.auth.sasl.secretRef }}
            - name: CONNECT_SASL_USERNAME
              value: {{ .Values.auth.sasl.userName }}
            - name: CONNECT_SASL_MECHANISM
              value: {{ .Values.auth.sasl.mechanism }}
            - name: CONNECT_SASL_PASSWORD_FILE
              value: rc-credentials/password
            {{- end }}
            - name: CONNECT_TLS_ENABLED
              value: {{ .Values.connectors.brokerTLS.enabled | quote }}
            {{- if .Values.connectors.brokerTLS.ca.secretRef }}
            - name: CONNECT_TRUSTED_CERTS
              value: {{ printf "ca/%s" (default "ca.crt" .Values.connectors.brokerTLS.ca.secretNameOverwrite) }}
            {{- end }}
            {{- if .Values.connectors.brokerTLS.cert.secretRef }}
            - name: CONNECT_TLS_AUTH_CERT
              value: {{ printf "cert/%s" (default "tls.crt" .Values.connectors.brokerTLS.cert.secretNameOverwrite) }}
            {{- end }}
            {{- if .Values.connectors.brokerTLS.key.secretRef }}
            - name: CONNECT_TLS_AUTH_KEY
              value: {{ printf "key/%s" (default "tls.key" .Values.connectors.brokerTLS.key.secretNameOverwrite) }}
            {{- end }}
            {{- with .Values.deployment.extraEnv }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: rest-api
              scheme: HTTP
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            failureThreshold: {{ .Values.deployment.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployment.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deployment.livenessProbe.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: /connectors
              port: rest-api
              scheme: HTTP
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            failureThreshold: {{ .Values.deployment.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployment.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
          ports:
            - containerPort: {{ .Values.connectors.restPort }}
              name: rest-api
              protocol: TCP
          {{- range $port := .Values.service.ports }}
            - containerPort: {{ $port.port }}
              name: {{ $port.name }}
              protocol: TCP
          {{- end }}
          resources:
            requests: {{ toYaml .Values.container.resources.request | nindent 14 }}
            limits: {{ toYaml .Values.container.resources.limits | nindent 14 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          {{- if and .Values.auth.sasl.userName .Values.auth.sasl.mechanism .Values.auth.sasl.secretRef }}
            - mountPath: /opt/kafka/connect-password/rc-credentials
              name: rc-credentials
          {{- end }}
          {{- if .Values.connectors.brokerTLS.ca.secretRef }}
            - name: truststore
              # The /opt/kafka/connect-certs is fixed path within Connectors
              mountPath: /opt/kafka/connect-certs/ca
          {{- end }}
          {{- if .Values.connectors.brokerTLS.cert.secretRef }}
            - name: cert
              # The /opt/kafka/connect-certs is fixed path within Connectors
              mountPath: /opt/kafka/connect-certs/cert
          {{- end }}
          {{- if .Values.connectors.brokerTLS.key.secretRef }}
            - name: key
              # The /opt/kafka/connect-certs is fixed path within Connectors
              mountPath: /opt/kafka/connect-certs/key
          {{- end }}
          {{- toYaml .Values.storage.volumeMounts | nindent 12 }}
      dnsPolicy: ClusterFirst
      restartPolicy: {{ .Values.deployment.restartPolicy }}
    {{- with .Values.deployment.schedulerName }}
      schedulerName: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.deployment.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.deployment.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.deployment.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}
      topologySpreadConstraints:
    {{- range $spread := .Values.deployment.topologySpreadConstraints }}
        - labelSelector:
            matchLabels:  {{ include "connectors-pod-labels" $root | nindent 14 }}
          maxSkew: {{ $spread.maxSkew }}
          topologyKey: {{ $spread.topologyKey }}
          whenUnsatisfiable: {{ $spread.whenUnsatisfiable }}
    {{- end }}
      volumes:
      {{- if .Values.connectors.brokerTLS.ca.secretRef }}
        - name: truststore
          secret:
            defaultMode: 0o444
            secretName: {{ .Values.connectors.brokerTLS.ca.secretRef }}
      {{- end }}
      {{- if .Values.connectors.brokerTLS.cert.secretRef }}
        - name: cert
          secret:
            defaultMode: 0o444
            secretName: {{ .Values.connectors.brokerTLS.cert.secretRef }}
      {{- end }}
      {{- if .Values.connectors.brokerTLS.key.secretRef }}
        - name: key
          secret:
            defaultMode: 0o444
            secretName: {{ .Values.connectors.brokerTLS.key.secretRef }}
      {{- end }}
      {{- if and .Values.auth.sasl.userName .Values.auth.sasl.mechanism .Values.auth.sasl.secretRef }}
        - name: rc-credentials
          secret:
            defaultMode: 0o444
            secretName: {{ .Values.auth.sasl.secretRef }}
      {{- end }}
      {{- toYaml .Values.storage.volume | nindent 8 }}
{{- end }}
