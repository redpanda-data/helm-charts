# Default values for Redpanda Connect.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Configuration settings for the Redpanda Connect Deployment.
deployment:

  # -- Number of Replicas for the Redpanda Connect Deployment.
  replicaCount: 1
  # -- Annotations to add to Redpanda Connect Pods.
  podAnnotations: {}
  # -- Labels to add to Redpanda Connect Pods.
  podLabels: {}
  # -- Set Annotations on the Redpanda Connect Deployment.
  annotations: {}
  # -- Time in seconds for Pod termination grace period.
  terminationGracePeriodSeconds: 60
  # -- Rollout the deployment on ConfigMap changes.
  rolloutConfigMap: true

  # -- Configuration for the readiness probe that checks if the container is ready to accept traffic.
  readinessProbe:

    # -- Number of consecutive failures before marking Pod as unhealthy.
    failureThreshold: 1
    # -- Frequency (in seconds) of readiness checks.
    periodSeconds: 5
    # -- Number of consecutive successes before marking Pod as healthy.
    successThreshold: 1
    # -- Timeout (in seconds) for each readiness check.
    timeoutSeconds: 2
    # -- HTTP GET request configuration for the readiness probe.
    httpGet:
      path: /ready
      port: http
      # scheme: HTTPS
      # httpHeaders:
      # - name: My-Header
      #   value: Bar

  # -- Configuration for the liveness probe that checks if the container is running.
  livenessProbe:

    # -- Number of consecutive failures before Pod is restarted.
    failureThreshold: 3
    # -- Frequency (in seconds) of liveness checks.
    periodSeconds: 5
    # -- Number of consecutive successes required to mark as healthy.
    successThreshold: 1
    # -- Timeout (in seconds) for each liveness check.
    timeoutSeconds: 2
    # -- HTTP GET request configuration for the liveness probe.
    httpGet:
      path: /ping
      port: http
      # scheme: HTTPS
      # httpHeaders:
      # - name: My-Header
      #   value: Bar

  # -- Restart policy for containers in the Pod.
  restartPolicy: Always

# -- Additional labels to apply to all resources created by this chart.
commonLabels: {}

# -- Configuration for the Redpanda Connect container image.
image:

  # -- Docker repository for the Redpanda Connect image.
  repository: "docker.redpanda.com/redpandadata/connect"
  # -- Image pull policy, such as `IfNotPresent` or `Always`.
  pullPolicy: IfNotPresent
  # -- Override for the default image tag (uses chart `appVersion` if empty).
  tag: ""

# -- List of Secrets for private Docker registry authentication.
imagePullSecrets: []

# - Override for the default chart name.
nameOverride: ""

# -- Override for the full name template.
fullnameOverride: ""

# -- Configuration for the Kubernetes ServiceAccount associated with the Redpanda Connect Pods.
serviceAccount:
  # -- Specify whether a ServiceAccount should be created.
  create: true
  # -- Annotations to add to the ServiceAccount.
  annotations: {}
  # -- Name of the ServiceAccount to use. If not set and `create` is `true`, a name is autogenerated.
  name: ""

# -- Security context to be applied at the Pod level.
podSecurityContext:
  {}
  # fsGroup: 2000

# -- Security context to be applied to containers in the Pod.
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# -- Configuration for the Kubernetes Service that exposes Redpanda Connect.
service:
  # -- Name of the Kubernetes Service.
  name: http
  # -- Type of Kubernetes Service, for example ClusterIP, NodePort, or LoadBalancer.
  type: ClusterIP
  # -- Service port for accessing the application.
  port: 80
  # -- Target port on the container.
  targetPort: http
  # -- Protocol to use for the Service, for example TCP or UDP.
  protocol: TCP

  # -- Additional ports to expose through the Service.
  extraPorts:
    # - name: extraPort
    #   port: 9999
    #   targetPort: 9999
    #   protocol: UDP

#  -- Configuration for Kubernetes Ingress to expose Redpanda Connect externally.
ingress:
  # -- Enable Ingress resource creation.
  enabled: false
  # -- Ingress Class name for the Ingress resource.
  className: ""
  # -- Annotations for the Ingress resource.
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- List of host definitions for the Ingress resource.
  hosts: []
  #  - host: chart-example.local
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  # -- TLS configuration for Ingress resource.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Environment variables to pass to the Redpanda Connect container.
env: []
#  - name: KAFKA_USER
#    valueFrom:
#      secretKeyRef:
#        name: s-name
#        key: KAFKA_USER

# -- Names of Secrets or ConfigMaps that contain environment variables to pass to the Redpanda Connect container.
envFrom:
  []
  # - secretRef:
  #     name: redpanda

# -- Resource limits and requests for the container.
resources:
  {}
  # By default, the chart does not specify default resources to increase the chances that it runs on environments with few
  # resources, such as Minikube. If you want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Configuration for Horizontal Pod Autoscaling for the Redpanda Connect Deployment.
autoscaling:
  # -- Enable Horizontal Pod Autoscaling.
  enabled: false
  # -- Minimum number of replicas if autoscaling is enabled.
  minReplicas: 1
  # -- Maximum number of replicas if autoscaling is enabled.
  maxReplicas: 12
  # -- List of metrics to use for scaling, such as CPU utilization.
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
#   - type: Resource
#     resource:
#       name: memory
#       target:
#         type: Utilization
#         averageUtilization: 80
#   behavior:
#     scaleDown:
#       stabilizationWindowSeconds: 300
#       policies:
#       - type: Pods
#         value: 1
#         periodSeconds: 60

# -- Node selector for scheduling Pods.
nodeSelector: {}

# -- Tolerations for scheduling Pods onto nodes with matching taints.
tolerations: []

# -- Affinity rules for scheduling Pods.
affinity: {}

# -- Configuration for the PodDisruptionBudget, which controls voluntary evictions of Redpanda Connect Pods.
podDisruptionBudget:
  # -- Enable a PodDisruptionBudget for the Deployment.
  enabled: false
  # -- Minimum number of available Pods for voluntary disruptions such as maintenance, scaling down, or node draining.
  # minAvailable: 1
  # -- Maximum number of unavailable Pods for voluntary disruptions.
  # maxUnavailable: 1

# -- Additional init containers to add to the Deployment.
initContainers: []

# -- Update strategy for the Deployment, for example `RollingUpdate`.
updateStrategy: {}
#   type: RollingUpdate
#   rollingUpdate:
#     maxUnavailable: 1

# -- Additional volumes to add to the Pod.
extraVolumes:
  []
  # - name: config-map
  #   configMap:
  #     name: cm-name
  # - name: secret
  #   secret:
  #     secretName: s-name

# -- Additional volume mounts for the container.
extraVolumeMounts:
  []
  # - name: config-map
  #   mountPath: /mnt/configmap
  #   readOnly: true
  # - name: secret
  #   mountPath: /mnt/secret
  #   readOnly: true

# -- Configuration settings for the streams mode feature in Redpanda Connect.
streams:
  # -- Enable streams mode.
  enabled: false
  # -- Name of the ConfigMap that contains stream configuration files.
  streamsConfigMap: ""
  api:
    # -- Enable the streams API.
    enable: true

# -- Configuration for the HTTP server used to expose Redpanda Connect endpoints.
http:
  # -- Enable HTTP server.
  enabled: true
  # -- Bind Address for the HTTP server.
  address: "0.0.0.0:4195"
  # -- Root path for HTTP API endpoints.
  root_path: "/redpanda-connect"
  # -- Enable debug endpoints for the HTTP server.
  debug_endpoints: false
  cors:
    # -- Enable CORS support for HTTP server.
    enabled: false
    # -- List of allowed Origins for CORS.
    # Uncomment and provide list when .Values.http.cors.enabled is true
    # allowedOrigins: []

# -- Configuration for the ServiceMonitor used by Prometheus to scrape Redpanda Connect metrics.
serviceMonitor:
  # -- Enable the creation of a ServiceMonitor for Prometheus monitoring.
  enabled: false
  # -- Scrape interval for Prometheus monitoring.
  interval: "10s"
  # -- HTTP Scheme to use for scraping.
  scheme: http
  # basicAuth:
  #   username: foo
  #   password: bar
  # tlsConfig:
  #   ca: my-ca
  #   cert: my-cert
  #   keySecret: secret

# metrics:
#   prometheus: {}

# tracing:
#   open_telemetry_collector:
#     http: []
#     grpc: []
#     tags: {}

# logger:
#   level: INFO
#   static_fields:
#     '@service': redpanda-connect

# -- Override the default entrypoint command of the container.
command: []

# -- Override the default arguments for the entrypoint command.
args: []

# -- Experimental feature: Watch config files for changes and automatically apply them without needing to rollout the Deployment. Make sure that `deployment.rolloutConfigMap` is `false`.
watch: false

# Allow submitting anonymous telemetry data
telemetry: true

# Spread incoming Pod in relation to the existing Pods across your cluster. https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/#topologyspreadconstraints-field
topologySpreadConstraints: []

# -- Configuration for `/redpanda-connect.yaml` file.
config: {}
