{{- /* Generated from "syntax.go" */ -}}

{{- define "syntax.Syntax" -}}
{{- range $_ := (list 1) -}}
{{- $_ = (0 | int) -}}
{{- $_ = "" -}}
{{- $_ = (dict ) -}}
{{- $_ = (list ) -}}
{{- $_ = `` -}}
{{- $_ = true -}}
{{- $_ = false -}}
{{- $_ = ((get (fromJson (include "_shims.len" (dict "a" (list "") ))) "r") | int) -}}
{{- $_ = ((get (fromJson (include "_shims.len" (dict "a" (list (list )) ))) "r") | int) -}}
{{- $_ = ((get (fromJson (include "_shims.len" (dict "a" (list (dict )) ))) "r") | int) -}}
{{- $_ = (true) -}}
{{- $slice := (get (fromJson (include "syntax.sliceExpr" (dict "a" (list ) ))) "r") -}}
{{- $_ = "1234" -}}
{{- $_ = (1234 | int) -}}
{{- $_ = 0.1 -}}
{{- $_ = "IPv4" -}}
{{- $_ = 2.718281828459045 -}}
{{- $x := (coalesce nil) -}}
{{- $_ = (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list (printf "[]%s" "interface {}") $x (coalesce nil)) ))) "r")) ))) "r") -}}
{{- $_ = (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list (printf "[]%s" "string") $x (coalesce nil)) ))) "r")) ))) "r") -}}
{{- $_ = (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list (printf "map[%s]%s" "string" "interface {}") $x (coalesce nil)) ))) "r")) ))) "r") -}}
{{- (dict "r" (dict "sliceExpr" $slice "negativeNumbers" (list -2 -4) "forExpr" (get (fromJson (include "syntax.forExpr" (dict "a" (list (10 | int)) ))) "r") "binaryExprs" (get (fromJson (include "syntax.binaryExprs" (dict "a" (list ) ))) "r") "instance-method" (get (fromJson (include "syntax.instanceMethod" (dict "a" (list ) ))) "r") )) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.TestStruct.MutateString" -}}
{{- $ts := (index .a 0) -}}
{{- $input := (index .a 1) -}}
{{- range $_ := (list 1) -}}
{{- $_ := (set $ts "SomeString" $input) -}}
{{- end -}}
{{- end -}}

{{- define "syntax.TestStruct.DoNotMutateString" -}}
{{- $ts := (index .a 0) -}}
{{- $input := (index .a 1) -}}
{{- range $_ := (list 1) -}}
{{- $_ := (set $ts "SomeString" $input) -}}
{{- end -}}
{{- end -}}

{{- define "syntax.TestStruct.Double" -}}
{{- $ts := (index .a 0) -}}
{{- $input := (index .a 1) -}}
{{- range $_ := (list 1) -}}
{{- (dict "r" ((mul $input (2 | int)) | int)) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.TestStruct.Multiplayer" -}}
{{- $ts := (index .a 0) -}}
{{- $input := (index .a 1) -}}
{{- range $_ := (list 1) -}}
{{- (dict "r" ((mul $input ($ts.Mult | int)) | int)) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.TestStruct.InstanceMethod" -}}
{{- $ts := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- (dict "r" $ts.TestBoolean) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.TestStruct.String" -}}
{{- $ts := (index .a 0) -}}
{{- $arg1 := (index .a 1) -}}
{{- $arg2 := (index .a 2) -}}
{{- range $_ := (list 1) -}}
{{- (dict "r" (printf $ts.SomeString $arg1 $arg2)) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.instanceMethod" -}}
{{- range $_ := (list 1) -}}
{{- $t := (mustMergeOverwrite (dict "TestBoolean" false "Mult" 0 "SomeString" "" ) (dict "TestBoolean" true "Mult" (4 | int) "SomeString" "%s and %s" )) -}}
{{- $f := (mustMergeOverwrite (dict "TestBoolean" false "Mult" 0 "SomeString" "" ) (dict "TestBoolean" false "Mult" (5 | int) )) -}}
{{- $_ := (get (fromJson (include "syntax.TestStruct.MutateString" (dict "a" (list $f "Change string") ))) "r") -}}
{{- $_ := (get (fromJson (include "syntax.TestStruct.DoNotMutateString" (dict "a" (list (deepCopy $f) "do not change") ))) "r") -}}
{{- (dict "r" (list (get (fromJson (include "syntax.TestStruct.InstanceMethod" (dict "a" (list $t) ))) "r") (get (fromJson (include "syntax.TestStruct.InstanceMethod" (dict "a" (list $f) ))) "r") (get (fromJson (include "syntax.TestStruct.Double" (dict "a" (list $t (2 | int)) ))) "r") (get (fromJson (include "syntax.TestStruct.Double" (dict "a" (list $t (4 | int)) ))) "r") (get (fromJson (include "syntax.TestStruct.Multiplayer" (dict "a" (list $t (6 | int)) ))) "r") (get (fromJson (include "syntax.TestStruct.Multiplayer" (dict "a" (list $f (6 | int)) ))) "r") (get (fromJson (include "syntax.TestStruct.String" (dict "a" (list (deepCopy $t) "one" "two") ))) "r") (eq $f.SomeString "Change string"))) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.sliceExpr" -}}
{{- range $_ := (list 1) -}}
{{- $_ = (mustSlice (list (1 | int) (2 | int) (3 | int)) 0) -}}
{{- $_ = (mustSlice (list (1 | int) (2 | int) (3 | int)) (1 | int)) -}}
{{- $_ = (mustSlice (list (1 | int) (2 | int) (3 | int)) 0 (2 | int)) -}}
{{- $_ = (mustSlice (list (1 | int) (2 | int) (3 | int)) (1 | int) (2 | int)) -}}
{{- $_ = (mustSlice (list (1 | int) (2 | int) (3 | int)) (1 | int) (2 | int) (3 | int)) -}}
{{- $_ = (substr 0 -1 "1234") -}}
{{- $_ = (substr (1 | int) -1 "1234") -}}
{{- $_ = (substr 0 (2 | int) "1234") -}}
{{- $_ = (substr (1 | int) (2 | int) "1234") -}}
{{- $s := "abcd" -}}
{{- $_ = (substr 0 ((sub ((get (fromJson (include "_shims.len" (dict "a" (list $s) ))) "r") | int) (1 | int)) | int) $s) -}}
{{- (dict "r" (get (fromJson (include "syntax.workingWithString" (dict "a" (list ) ))) "r")) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.workingWithString" -}}
{{- range $_ := (list 1) -}}
{{- $amount := "2.5Gi" -}}
{{- $unit := (printf "%c" (index $amount ((sub ((get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r") | int) (1 | int)) | int))) -}}
{{- $savedUnit := $unit -}}
{{- $amount = (substr 0 ((sub ((get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r") | int) (1 | int)) | int) $amount) -}}
{{- if (eq $unit "i") -}}
{{- $unit = (printf "%s%s" (substr ((sub ((get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r") | int) (1 | int)) | int) -1 $amount) $unit) -}}
{{- $amount = (substr 0 ((sub ((get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r") | int) (1 | int)) | int) $amount) -}}
{{- end -}}
{{- (dict "r" (dict "unit" $unit "amount" $amount "unitIsEqual" (eq $unit "Gi") "lastCharacter" (eq $savedUnit "i") )) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.binaryExprs" -}}
{{- range $_ := (list 1) -}}
{{- $_ = (mul (1 | int) (1 | int)) -}}
{{- $_ = (add (1 | int) (1 | int)) -}}
{{- $_ = (sub (1 | int) (1 | int)) -}}
{{- $_ = (div (1 | int) (1 | int)) -}}
{{- $_ = (mod (1 | int) (1 | int)) -}}
{{- $_ = (eq (1 | int) (1 | int)) -}}
{{- $_ = (ne (1 | int) (1 | int)) -}}
{{- $_ = ((mul ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((add ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((sub ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((div ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((mod ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = (eq ((1 | int) | int) ((1 | int) | int)) -}}
{{- $_ = (ne ((1 | int) | int) ((1 | int) | int)) -}}
{{- $_ = ((mul ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((add ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((sub ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((div ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = ((mod ((1 | int) | int) ((1 | int) | int)) | int) -}}
{{- $_ = (eq ((1 | int) | int) ((1 | int) | int)) -}}
{{- $_ = (ne ((1 | int) | int) ((1 | int) | int)) -}}
{{- $_ = ((mul ((1 | int64) | int64) ((1 | int64) | int64)) | int64) -}}
{{- $_ = ((add ((1 | int64) | int64) ((1 | int64) | int64)) | int64) -}}
{{- $_ = ((sub ((1 | int64) | int64) ((1 | int64) | int64)) | int64) -}}
{{- $_ = ((mod ((1 | int64) | int64) ((1 | int64) | int64)) | int64) -}}
{{- $_ = ((div ((1 | int64) | int64) ((1 | int64) | int64)) | int64) -}}
{{- $_ = (eq ((1 | int64) | int64) ((1 | int64) | int64)) -}}
{{- $_ = (ne ((1 | int64) | int64) ((1 | int64) | int64)) -}}
{{- $_ = (eq (dict ) (coalesce nil)) -}}
{{- $_ = (ne (dict ) (coalesce nil)) -}}
{{- $result := (list (gt (1 | int) (2 | int)) (lt (1 | int) (2 | int)) (ge (1 | int) (2 | int)) (le (1 | int) (2 | int)) (ge (2 | int) (2 | int)) (le (2 | int) (2 | int))) -}}
{{- (dict "r" $result) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.forExpr" -}}
{{- $iteration := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- $result := (list ) -}}
{{- $test := (list ) -}}
{{- range $_, $i := untilStep ((0 | int)|int) ($iteration|int) (1|int) -}}
{{- $test = (mustAppend $test (printf "%d" $i)) -}}
{{- end -}}
{{- $result = (mustAppend $result $test) -}}
{{- $test = (list ) -}}
{{- range $_, $i := untilStep ((2 | int)|int) ($iteration|int) (1|int) -}}
{{- $test = (mustAppend $test (printf "%d" $i)) -}}
{{- end -}}
{{- $result = (mustAppend $result $test) -}}
{{- $test = (list ) -}}
{{- range $_, $i := untilStep ((2 | int)|int) ($iteration|int) ((2 | int)|int) -}}
{{- $test = (mustAppend $test (printf "%d" $i)) -}}
{{- end -}}
{{- $result = (mustAppend $result $test) -}}
{{- $test = (list ) -}}
{{- range $_, $i := untilStep ((17 | int)|int) ($iteration|int) ((-2 | int)|int) -}}
{{- $test = (mustAppend $test (printf "%d" $i)) -}}
{{- end -}}
{{- $result = (mustAppend $result $test) -}}
{{- $test = (list ) -}}
{{- range $_, $i := untilStep ($iteration|int) ((17 | int)|int) ((-2 | int)|int) -}}
{{- $test = (mustAppend $test (printf "%d" $i)) -}}
{{- end -}}
{{- $result = (mustAppend $result $test) -}}
{{- (dict "r" $result) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

