{{- /* Generated from "syntax.go" */ -}}

{{- define "syntax.Syntax" -}}
{{- range $_ := (list 1) -}}
{{- $_ = 0 -}}
{{- $_ = "" -}}
{{- $_ = (dict ) -}}
{{- $_ = (list ) -}}
{{- $_ = `` -}}
{{- $_ = true -}}
{{- $_ = false -}}
{{- $_ = (int (get (fromJson (include "_shims.len" (dict "a" (list "") ))) "r")) -}}
{{- $_ = (int (get (fromJson (include "_shims.len" (dict "a" (list (list )) ))) "r")) -}}
{{- $_ = (int (get (fromJson (include "_shims.len" (dict "a" (list (dict )) ))) "r")) -}}
{{- $_ := (get (fromJson (include "syntax.binaryExprs" (dict "a" (list ) ))) "r") -}}
{{- $_ = (true) -}}
{{- $slice := (get (fromJson (include "syntax.sliceExpr" (dict "a" (list ) ))) "r") -}}
{{- $_ = "1234" -}}
{{- $_ = 1234 -}}
{{- $_ = "IPv4" -}}
{{- $x := (coalesce nil) -}}
{{- $_ = (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list "int" $x 0) ))) "r")) ))) "r") -}}
{{- $_ = (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list (printf "[]%s" "interface {}") $x (coalesce nil)) ))) "r")) ))) "r") -}}
{{- $_ = (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list (printf "[]%s" "string") $x (coalesce nil)) ))) "r")) ))) "r") -}}
{{- $_ = (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list (printf "map[%s]%s" "string" "interface {}") $x (coalesce nil)) ))) "r")) ))) "r") -}}
{{- (dict "r" (dict "sliceExpr" $slice )) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.sliceExpr" -}}
{{- range $_ := (list 1) -}}
{{- $_ = (mustSlice (list 1 2 3) 0) -}}
{{- $_ = (mustSlice (list 1 2 3) 1) -}}
{{- $_ = (mustSlice (list 1 2 3) 0 2) -}}
{{- $_ = (mustSlice (list 1 2 3) 1 2) -}}
{{- $_ = (mustSlice (list 1 2 3) 1 2 3) -}}
{{- $_ = (substr 0 -1 "1234") -}}
{{- $_ = (substr 1 -1 "1234") -}}
{{- $_ = (substr 0 2 "1234") -}}
{{- $_ = (substr 1 2 "1234") -}}
{{- $s := "abcd" -}}
{{- $_ = (substr 0 (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $s) ))) "r")) 1)) $s) -}}
{{- (dict "r" (get (fromJson (include "syntax.workingWithString" (dict "a" (list ) ))) "r")) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.workingWithString" -}}
{{- range $_ := (list 1) -}}
{{- $amount := "2.5Gi" -}}
{{- $unit := (printf "%c" (index $amount (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)))) -}}
{{- $savedUnit := $unit -}}
{{- $amount = (substr 0 (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)) $amount) -}}
{{- if (eq $unit "i") -}}
{{- $unit = (printf "%s%s" (substr (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)) -1 $amount) $unit) -}}
{{- $amount = (substr 0 (int (sub (int (get (fromJson (include "_shims.len" (dict "a" (list $amount) ))) "r")) 1)) $amount) -}}
{{- end -}}
{{- (dict "r" (dict "unit" $unit "amount" $amount "unitIsEqual" (eq $unit "Gi") "lastCharacter" (eq $savedUnit "i") )) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.binaryExprs" -}}
{{- range $_ := (list 1) -}}
{{- $_ = (mul 1 1) -}}
{{- $_ = (add 1 1) -}}
{{- $_ = (sub 1 1) -}}
{{- $_ = (div 1 1) -}}
{{- $_ = (eq 1 1) -}}
{{- $_ = (ne 1 1) -}}
{{- $_ = (int (mul (int 1) (int 1))) -}}
{{- $_ = (int (add (int 1) (int 1))) -}}
{{- $_ = (int (sub (int 1) (int 1))) -}}
{{- $_ = (int (div (int 1) (int 1))) -}}
{{- $_ = (eq (int 1) (int 1)) -}}
{{- $_ = (ne (int 1) (int 1)) -}}
{{- $_ = (int (mul (int 1) (int 1))) -}}
{{- $_ = (int (add (int 1) (int 1))) -}}
{{- $_ = (int (sub (int 1) (int 1))) -}}
{{- $_ = (int (div (int 1) (int 1))) -}}
{{- $_ = (eq (int 1) (int 1)) -}}
{{- $_ = (ne (int 1) (int 1)) -}}
{{- $_ = (int64 (mul (int64 1) (int64 1))) -}}
{{- $_ = (int64 (add (int64 1) (int64 1))) -}}
{{- $_ = (int64 (sub (int64 1) (int64 1))) -}}
{{- $_ = (int64 (div (int64 1) (int64 1))) -}}
{{- $_ = (eq (int64 1) (int64 1)) -}}
{{- $_ = (ne (int64 1) (int64 1)) -}}
{{- $_ = (eq (dict ) (coalesce nil)) -}}
{{- $_ = (ne (dict ) (coalesce nil)) -}}
{{- end -}}
{{- end -}}

