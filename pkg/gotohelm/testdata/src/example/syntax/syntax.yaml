{{- /* Generated from "syntax.go" */ -}}

{{- define "syntax.Syntax" -}}
{{- range $_ := (list 1) -}}
{{- $_ = 0 -}}
{{- $_ = "" -}}
{{- $_ = (dict ) -}}
{{- $_ = (list ) -}}
{{- $_ = `` -}}
{{- $_ = true -}}
{{- $_ = false -}}
{{- $_ = (len "") -}}
{{- $_ = (len (list )) -}}
{{- $_ = (len (dict )) -}}
{{- $_ := (get (fromJson (include "syntax.binaryExprs" (dict "a" (list ) ))) "r") -}}
{{- $_ = (true) -}}
{{- $_ = (mustSlice (list 1 2 3) 0) -}}
{{- $_ = (mustSlice (list 1 2 3) 1) -}}
{{- $_ = (mustSlice (list 1 2 3) 0 2) -}}
{{- $_ = (mustSlice (list 1 2 3) 1 2) -}}
{{- $_ = (mustSlice (list 1 2 3) 1 2 3) -}}
{{- $_ = (substr 0 -1 "1234") -}}
{{- $_ = (substr 1 -1 "1234") -}}
{{- $_ = (substr 0 2 "1234") -}}
{{- $_ = (substr 1 2 "1234") -}}
{{- $s := "abcd" -}}
{{- $_ = (substr 0 (int (sub (len $s) 1)) $s) -}}
{{- $_ = "1234" -}}
{{- $_ = 1234 -}}
{{- $_ = "IPv4" -}}
{{- (dict "r" (dict )) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "syntax.binaryExprs" -}}
{{- range $_ := (list 1) -}}
{{- $_ = (mul 1 1) -}}
{{- $_ = (add 1 1) -}}
{{- $_ = (sub 1 1) -}}
{{- $_ = (div 1 1) -}}
{{- $_ = (eq 1 1) -}}
{{- $_ = (ne 1 1) -}}
{{- $_ = (int (mul (int 1) (int 1))) -}}
{{- $_ = (int (add (int 1) (int 1))) -}}
{{- $_ = (int (sub (int 1) (int 1))) -}}
{{- $_ = (int (div (int 1) (int 1))) -}}
{{- $_ = (eq (int 1) (int 1)) -}}
{{- $_ = (ne (int 1) (int 1)) -}}
{{- $_ = (int (mul (int 1) (int 1))) -}}
{{- $_ = (int (add (int 1) (int 1))) -}}
{{- $_ = (int (sub (int 1) (int 1))) -}}
{{- $_ = (int (div (int 1) (int 1))) -}}
{{- $_ = (eq (int 1) (int 1)) -}}
{{- $_ = (ne (int 1) (int 1)) -}}
{{- $_ = (int64 (mul (int64 1) (int64 1))) -}}
{{- $_ = (int64 (add (int64 1) (int64 1))) -}}
{{- $_ = (int64 (sub (int64 1) (int64 1))) -}}
{{- $_ = (int64 (div (int64 1) (int64 1))) -}}
{{- $_ = (eq (int64 1) (int64 1)) -}}
{{- $_ = (ne (int64 1) (int64 1)) -}}
{{- $_ = (eq (dict ) (coalesce nil)) -}}
{{- $_ = (ne (dict ) (coalesce nil)) -}}
{{- end -}}
{{- end -}}

